const TelegramBot = require('node-telegram-bot-api')
const config = require('./config')
const keyboards = require('./src/keyboard-buttons')

const QiwiBillPaymentsAPI = require('@qiwi/bill-payments-node-js-sdk');
const qiwiApi = new QiwiBillPaymentsAPI(config.SECRET_KEY);
const publicKey = config.PUBLIC_KEY;

const { P2P, Personal, Recipients, Detector, Currency } = require("qiwi-sdk")
const qiwi = new Personal(config.QIWI_ACESSTOKEN, config.QIWI_WALLET)
const detector = new Detector()

const postpone = require('node-postpone');

/* const params = {
    publicKey,
    amount: 200,
    billId: '893794793973',
    successUrl: 'https://merchant.com/payment/success?billId=893794793973'
};

const link = qiwiApi.createPaymentForm(params);
console.log(link) */

//====================INITIALIZE FIREBASE==============================
const firebase_connect = require('firebase')
const { reset } = require('nodemon')
const { captureRejectionSymbol } = require('node-telegram-bot-api')
const { chat } = require('googleapis/build/src/apis/chat')

const fb = firebase_connect.initializeApp({
    apiKey:'AIzaSyA0wSxSsB938N4mKpV5Nec0tBWbpPFyZAQ',
    authDomain:'upperrestaurant.firebaseapp.com',
    databaseURL: 'https://upperrestaurant-default-rtdb.europe-west1.firebasedatabase.app'
})
//====================================================================

//–ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(config.TOKEN,
{
    polling:
    {
        interval: 300,
        autoStart: true,
        params: 
        {
            timeout: 10
        }
    }
})

//////////      –ü–ï–†–ï–ú–ï–ù–ù–´–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø     ///////////////
let message_toedit = []
let messagetext_toedit = []
let message_todelete = []
let addmoney = []

let isWritingBlank = []
let isWritingBlank2 = []
let isWritingContacts = []
let isWritingContacts2 = []

let users_name = []
let users_realname = []
let userage = []
let userdescription = []
let userinsta = []
let userphone = []
let username = []
let userpic = []
let usercoins = []
let current_mode = []
let ischeckingmails = []
let user_donationlink = []

let isAddingcardinfo = []

let donateregisterstep = []
let donate_name = []
let donate_money = []
let donate_minmoney = []
let donate_duration = []
let donate_sendduration = []
let donate_private = []
let donate_photo = []
let donate_duration_secs = []
let donate_sendduration_secs = []
let donate_materials = []
let donate_editmaterials = []
let donate_editpreview = []
let donate_tempdonateid = []

let user_donations = []
let user_participants = []
let donationnames = []
let participantsnames = []

let participating_data = []

///////////////////     –°–û–û–ë–©–ï–ù–ò–Ø       //////////////////////////
let hellomessage = '–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ê–≤—Ç–æ—Ä–æ–º —Å–±–æ—Ä–∞ –º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—ç—Ç–æ–º—É —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ <b>–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –¥–ª—è –≤—Å–µ—Ö</b>.\n\n‚ÑπÔ∏è <b>–†–∞–±–æ—Ç–∞–µ—Ç —Å–±–æ—Ä —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:</b>\n\n1. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç —á–∞—Å—Ç—å —Å–±–æ—Ä–∞ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n\n2. –£ –∫–∞–∂–¥–æ–≥–æ —Å–±–æ—Ä–∞ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–±–æ—Ä –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–±–µ—â–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –∞–≤—Ç–æ—Ä - –≤—ã—Ä—É—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏), –ª–∏–±–æ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–µ–Ω—å–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ)'
let newdonationsteps = [
'–ü—Ä–∏–≤–µ—Ç. –° —ç—Ç–∏–º –±–æ—Ç–æ–º –í—ã –º–æ–∂–µ—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –¥–µ–Ω—å–≥–∏. \n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, <b>–Ω–∞ —á—Ç–æ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å?</b> –≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤):', 
'<b>–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å?</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–≤–∏–¥—è—Ç —Å—É–º–º—É, –æ–Ω–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ª–∏—à—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä. 50%).\n\n<b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω. 500 —Ä—É–±, –º–∞–∫—Å. 300.000 —Ä—É–±):</b>', 
'<b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Å–±–æ—Ä–µ?</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Å—É–º–º—É –∏–ª–∏ –±–æ–ª—å—à–µ.\n\n<b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω. 50 —Ä—É–±, –º–∞–∫—Å. 10.000 —Ä—É–±):</b>', 
'<b>–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Å–±–æ—Ä?</b>\n\n–ö–æ–≥–¥–∞ —Å–±–æ—Ä –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —É –í–∞—Å –±—É–¥–µ—Ç 3 –¥–Ω—è, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã, –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–º–∞–∫—Å. 30 –¥–Ω–µ–π):</b>', 
'–ï—Å—Ç—å –ø—Ä–µ–≤—å—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–Ω–∞–ø—Ä. –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)?\n\n–°–±–æ—Ä—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è.\n\n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, —Å —Å–∂–∞—Ç–∏–µ–º:', 
'<b>–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª?</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ –ø–æ–∑–∂–µ, –Ω–æ –µ—Å–ª–∏ –í—ã –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ–≥–æ <b>–≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞, —Å–±–æ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω</b> –∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã—Ä—É—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –≤ –¢–ì –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º (—Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å https://):']

/////////////////////       –ö–ù–û–ü–ö–ò     /////////////////////////////////////
let backtostart = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'gotostart_cb']
let checkchannelfollow = ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'channelfollw_cb']
let backtonewdonate = ['donatestep0_cb', 'donatestep1_cb', 'donatestep2_cb', 'donatestep3_cb', 'donatestep4_cb', 'donatestep5_cb']
let ihavematerials = ['üì∑ –£ –º–µ–Ω—è –µ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'ihavecontent_cb', '–ü—Ä–∏–ª–æ–∂—É –ø–æ–∑–∂–µ', 'illsendlatermat_cb']
let sborprivacy = ['‚úÖ –î–ª—è –≤—Å–µ—Ö', 'falseprivacy_cb', 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π (–ø–æ —Å—Å—ã–ª–∫–µ)', 'trueprivacy_cb']
let previewimg = ['üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é', 'uploadpreview_cb', '‚ùå –ë–µ–∑ –ø—Ä–µ–≤—å—é' , 'dontupload_preview']
let createdonation = ['üåê –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä', 'publishdonation_cb']
let backtomain = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'showadminpanel_cb']
let editmaterial = ['‚úèÔ∏è –î–æ–±./–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', 'editmaterials']
let editpreview = ['üì∑ –î–æ–±./–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–≤—å—é', 'editphotopreview']
let checkparticipantsbutton = ['üßæ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'checkparticipantsbtn']
let backeditmaterial = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backerditmaterials_cb']
let backeditpreview = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backerditpreview_cb']

let canceldonation = ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä', 'canceldonationcb']
let finishdonation = ['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä', 'finishdonationcb']

let mybalancebutton = ['üí∏ –ë–∞–ª–∞–Ω—Å', 'mybalance_cb']
let addmoneybutton = ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'addmoneybt_cb']
let addmoneyparticipant = ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'addmoneybt_cb']
let balancehistory = ['üßæ –ò—Å—Ç–æ—Ä–∏—è', 'historybalance_cb']
let withdrawbutton = ['üì§ –í—ã–≤–µ—Å—Ç–∏', 'withdrawbutton_cb']
let cardinfobutton = ['üí≥ –î–æ–±./–ò–∑–º. —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'addwithdrawinfo']
let withdrawallbutton = ['ü§ë –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ', 'withdrawall']
let withdrawcustombutton = ['üí≤ –í—ã–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å', 'withdrawcustom']
let acceptwithdrawal = ['‚úÖ –ü—Ä–∏–Ω—è—Ç—å', 'acceptwithdrawal']
let declinewithdrawal = ['‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'declinewithdrawal']

let participatebutton = ['–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ', 'partcptbtncb']
let opendonationparticipant = 'opendonpartc_cb'

let alldonationslist = ['üéõ –í—Å–µ —Å–±–æ—Ä—ã', 'alldonations_cb']
let mydonationslist = ['üóÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä—ã', 'mydonationslist_cb']
let myparticipantslist = ['üë§ –£—á–∞—Å—Ç–∏–µ –≤ —Å–±–æ—Ä–∞—Ö', 'myparticipantslist_cb']
let publicdonationlist = ['üåç –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–±–æ—Ä—ã', 'myparticipantslist_cb']

let backtoblank = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktblnk_cb']
let backtocontacts = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktcntcs_cb']
let contactsbuttons = [['–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∫?', 'hwtaddncknm_cb'], ['–¢–µ–ª–µ—Ñ–æ–Ω: ', 'usrnpnnmb_cb'], ['–ò–Ω—Å—Ç–∞–≥—Ä–∞–º: ','instgrms_cb']]
let contactsbuttons2 = [['–¢–µ–ª–µ—Ñ–æ–Ω: ', 'usrnpnnmb2_cb'], ['–ò–Ω—Å—Ç–∞–≥—Ä–∞–º: ','instgrms2_cb']]
const aboutyoublank_text = [['–í–∞—à–µ –∏–º—è: ','aboutblank1_cb'], ['–í–æ–∑—Ä–∞—Å—Ç: ','aboutblank2_cb'], ['–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–µ–∫—Å–µ: ','aboutblank3_cb'], ['–ö–æ–Ω—Ç–∞–∫—Ç—ã','aboutblank4_cb'], ['–ù–∞–π—Ç–∏ –ø–∞—Ä—É','findpairblank_cb']]
const aboutyoublank_text2 = [['–í–∞—à–µ –∏–º—è: ','aboutblank21_cb'], ['–í–æ–∑—Ä–∞—Å—Ç: ','aboutblank22_cb'], ['–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–µ–∫—Å–µ: ','aboutblank23_cb'], ['–ö–æ–Ω—Ç–∞–∫—Ç—ã','aboutblank24_cb'], ['–ù–∞–π—Ç–∏ –ø–∞—Ä—É','findpairblank2_cb']]
let sharenumber = ['–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', '‚óÄÔ∏è –ù–∞–∑–∞–¥']
let openmenubutton = ['–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', 'openmenu_cb']
let deleteaccount = ['‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'dltacctn_cb']
let addmoneyamount = 'addmnbs1_' // + amount of money added
let checkmoneyaddbutton = ['üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'chckmnadd_', 'chckmnbckck_']
let deleteaccountbutton = ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continuedltn_cb', '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bckfrmdltcn_cb']
let answermessage = ['‚úÖ –î–∞!', 'yesanswermsg_']
let getpartnerscontacts = ['üìû –ù–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—É', 'getparntncns_cb', '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞', 'blcmprntc_cb']
let whoareyoubutton = ['–Ø - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', 'createdonation_cb', '–Ø - —É—á–∞—Å—Ç–Ω–∏–∫ —Å–±–æ—Ä–∞', 'showdonations_cb']
let billid = []

/////////////////////       –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø         //////////////////////////////
let userdescription_maxsymbols = 0

////////////////////    –°–¢–ò–ö–ï–†–´     //////////////////////////////
//–ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã id –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
let sticker_hello  /* = 'CAACAgIAAxkBAAIRSmDvAUTpAQABWFdBhIj3i-e5owJFvQACbwAD29t-AAGZW1Coe5OAdCAE' */
let openkeyboard_pic = 'https://storage.googleapis.com/upperrestaurant.appspot.com/Standards/howtoopen.jpg'

const deelay = ms => {
    return new Promise(r => setTimeout(() => r(), ms))
}

CheckDeadlinesList(true)

let stickers_presets = fb.database().ref('Grindr/presets/stickers')
stickers_presets.on('value', (result) => {
    sticker_hello = result.val().sticker_hello
})

let pricelists = fb.database().ref('Grindr/presets/payments/pricelist/')
pricelists.on('value', (result) => {
    pricelist_delete_account = result.val().delete_account
    pricelist_sharecontact = result.val().sharecontact
})

let restrictions = fb.database().ref('Grindr/presets/restrictions')
restrictions.on('value', (result) => {
    userdescription_maxsymbols = result.val().userdescription_maxsymbols
})

//–ó–¥–µ—Å—å –º—ã —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç—É, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.on('message', (msg) =>
{
    const { chat, message_id, text } = msg

    if (!text.includes('/')){
        if (donateregisterstep[chat.id] !== undefined && donateregisterstep[chat.id] > 0){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
    
            if (donateregisterstep[chat.id] === 6){
                if (msg.text.includes('https://')){
                    donate_materials[chat.id] = text
                    CreateDonation(chat)
                }
            }
    
            if (donateregisterstep[chat.id] === 5 && msg.photo !== undefined){
                donate_photo[chat.id] = msg.photo[0].file_id
                bot.editMessageText(newdonationsteps[5], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[3]
                            }],
                            [{
                                text: ihavematerials[0],
                                callback_data: ihavematerials[1]
                            },
                            {
                                text: ihavematerials[2],
                                callback_data: ihavematerials[3]
                            }]
                        ]
                    }
                })
            }
    
            if (donateregisterstep[chat.id] === 4){
                if (parseInt(text) >= 1 && parseInt(text) <= 30){
                    donate_duration[chat.id] = parseInt(text)
                    donateregisterstep[chat.id] = 5
                    bot.editMessageText(newdonationsteps[4], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: backtonewdonate[2]
                                }],
                                [{
                                    text: previewimg[2],
                                    callback_data: previewimg[3]
                                }]
                            ]
                        }
                    })
                }
            }
    
            if (donateregisterstep[chat.id] === 3){
                if (parseInt(text) >= 50 && parseInt(text) <= 10000){
                    donateregisterstep[chat.id] = 4
                    donate_minmoney[chat.id] = parseInt(text)
                    bot.editMessageText(newdonationsteps[3], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: backtonewdonate[1]
                                }]
                            ]
                        }
                    })
                }
            }
    
            if (donateregisterstep[chat.id] === 2){
                if (parseInt(text) >= 500 && parseInt(text) <= 300000){
                    donateregisterstep[chat.id] = 3
                    donate_money[chat.id] = parseInt(text)
                    bot.editMessageText(newdonationsteps[2], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: backtonewdonate[0]
                                }]
                            ]
                        }
                    })
                }
            }
            
            if (donateregisterstep[chat.id] === 1){
                if (text.length < 100){
                    donateregisterstep[chat.id] = 2
                    donate_name[chat.id] = text
    
                    bot.editMessageText(newdonationsteps[1], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: whoareyoubutton[1]
                                }]
                            ]
                        }
                    })
                }
                
            }
        }
    
        if (donate_editmaterials[chat.id] !== undefined && donate_editmaterials[chat.id] === true){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            if (msg.text.includes('https://')){
                donate_materials[chat.id] = text
    
                let updates = {}
        
                updates['Kickstarter/users/' + chat.id + '/donations/' + donate_tempdonateid[chat.id] + '/materials'] = text
                fb.database().ref().update(updates)
                .then(() => {
                    OpenDonation(chat, donate_tempdonateid[chat.id])
                    donate_editmaterials[chat.id] = false
                    donate_tempdonateid[chat.id] = '/error/'
    
                    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                })
            }
        }
    
        if (donate_editpreview[chat.id] !== undefined && donate_editpreview[chat.id] === true){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            if (msg.photo !== undefined){
                let updates = {}
                updates['Kickstarter/users/' + chat.id + '/donations/' + donate_tempdonateid[chat.id] + '/photo'] = msg.photo[0].file_id
                fb.database().ref().update(updates)
                .then(() => {
                    OpenDonation(chat, donate_tempdonateid[chat.id])
                    donate_editpreview[chat.id] = false
                    donate_tempdonateid[chat.id] = '/error/'
    
                    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                })
            }
        }
    
        if (isAddingcardinfo[chat.id] !== undefined && isAddingcardinfo[chat.id] !== null){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
    
            if (isAddingcardinfo[chat.id] === 'qiwi'){
                if (text.length >= 11 && text.length <= 12 && !isNaN(text)) {
                    let updates = {}
                    updates['Kickstarter/users/' + chat.id + '/balance/card'] = 'qiwi:' + text
                    fb.database().ref().update(updates).then(() => {
                        WithDrawInfo(chat)
                        isAddingcardinfo[chat.id] = undefined
                    })
                }
            }

            if (isAddingcardinfo[chat.id] === 'yoomoney'){
                if (text.length === 16 && !isNaN(text)) {
                    let updates = {}
                    updates['Kickstarter/users/' + chat.id + '/balance/card'] = 'yoomoney:' + text
                    fb.database().ref().update(updates).then(() => {
                        WithDrawInfo(chat)
                        isAddingcardinfo[chat.id] = undefined
                    })
                }
            }
        }
    
        if (participating_data[chat.id] !== undefined && participating_data[chat.id][0] !== undefined && participating_data[chat.id][0] === true) {
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            if (parseInt(text) >= participating_data[chat.id][1] && parseInt(text) <= participating_data[chat.id][2]){
                ParticipateDonation(chat, text)
            }
        }
    }
    
})

//–ó–¥–µ—Å—å –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
bot.on('callback_query', query => {
    const { chat, message_id, text } = query.message

    //—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (query.data.includes('deletemessage')){
        for (let i = 0; i< message_todelete[chat.id].length; i++){
            bot.deleteMessage(chat.id, message_todelete[chat.id][i]).catch(err => {console.log('here: ' + err)})
        }
        
    }

    //–î–û–ë–ê–í–ò–¢–¨ –°–Æ–î–ê –í–°–ï –ß–¢–û –ï–°–¢–¨ –ü–†–ò –°–¢–ê–†–¢–ï
    if (query.data === backtostart[1]){
        Start(query.message)
    }

    if (message_toedit[chat.id] !== undefined){
        if (query.data === backtomain[1]){
            bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
            Auth(chat)
        }
    
        if (query.data === whoareyoubutton[1]){
            donateregisterstep[chat.id] = 1
            donate_name[chat.id] = ''
            donate_money[chat.id] = 0
            donate_minmoney[chat.id] = 0
            donate_duration[chat.id] = 0
            donate_sendduration[chat.id] = 3
            donate_photo[chat.id] = ''
            donate_duration_secs[chat.id] = 0
            donate_sendduration_secs[chat.id] = 0
            donate_materials[chat.id] = ''
    
            let creatordata = fb.database().ref('Kickstarter/mailing')
            creatordata.get().then(result => {
                donate_private[chat.id] = true
                if (result.exists()){
                    if (result.val().authors.includes(chat.id)){
                        donate_private[chat.id] = false
                        console.log('changing: ' + donate_private[chat.id])
                    }
                }
                bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
                bot.sendMessage(chat.id, newdonationsteps[0], {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtostart[1]
                            }]
                        ]
                    }
                })
                .then(res => {
                    message_toedit[chat.id][0] = res.message_id
                    messagetext_toedit[chat.id][0] = newdonationsteps[0]
                })
            })
    
            
        }
    
        if (query.data.includes(checkchannelfollow[1])){
            let checkuser = fb.database().ref('Kickstarter/settings/channel')
            checkuser.get().then(result => {
                if (query.data === checkchannelfollow[1] + '_0'){
                    let txt = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ - —Å–µ–π—á–∞—Å.'
                    bot.editMessageText(txt, {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                                    url: result.val().invite_link
                                }],
                                [{
                                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                    callback_data: checkchannelfollow[1] + '_1'
                                }]
                            ]
                        }
                    })
                }
                if (query.data === checkchannelfollow[1] + '_1'){
                    bot.getChatMember(result.val().id, chat.id).then(res => {
                        console.log(res)
                        if (res.status === 'member' || res.status === 'creator' || res.status === 'administrator'){
                            console.log(user_donationlink[chat.id])
                            if (user_donationlink[chat.id] !== undefined){
                                OpenDonationParticipant(chat, null)
                            }
                            else {
                                myBalance(chat)
                                /* let txt = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–±–æ—Ä–µ, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç –∞–≤—Ç–æ—Ä–∞ —ç—Ç–æ–≥–æ —Å–±–æ—Ä–∞. –ü–µ—Ä–µ–π–¥—è –ø–æ –Ω–µ–π, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Å–±–æ—Ä üòä'
                                bot.editMessageText(txt, {
                                    parse_mode: 'HTML',
                                    chat_id: chat.id,
                                    message_id: message_toedit[chat.id][0],
                                }) */
                            }
                        }
                        else {
                            bot.answerCallbackQuery({
                                callback_query_id: query.id,
                                text: 'ü•∫ –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã...\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                                show_alert: true
                            })
                        }
                        //–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –µ—Å–ª–∏ —É –Ω–∞—Å
                        //–µ—Å—Ç—å —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–±–æ—Ä, —Ç–æ –∑–∞—Ö–æ–¥–∏–º –≤ –Ω–µ–≥–æ
                    })
                    .catch(err => {
                        console.log(err)
                        bot.answerCallbackQuery({
                            callback_query_id: query.id,
                            text: 'ü•∫ –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã...\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                            show_alert: true
                        })
                    })
                }
            })
            
            
        }
    
        if (query.data === mydonationslist[1]){
    
            donate_editmaterials[chat.id] = false
            
            bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
            bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(error => {console.log(error)})
            
            let txt = '<b>–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤:</b>'
    
            //user_donations[chat.id] = []
    
            let kb = []
    
            let num_online = 0
            let txt_online = ''
            let kb_online = []
    
            let num_waiting = 0
            let txt_waiting = ''
            let kb_waiting = []
    
            let num_canceled = 0
            let txt_canceled = ''
            let kb_canceled = []
            
            let num_offline = 0
            let txt_offline = ''
            let kb_offline = []
    
            for (let i=0; i< donationnames[chat.id].length; i++){
                let donationsdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + donationnames[chat.id][i])
                donationsdata.get().then(result => {
                    if (result.val().status === 'online'){
                        if (num_online === 0) txt_online += '\n\n<b>üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã:</b>'
    
                        //user_donations[chat.id][num_online] = result.val()
    
                        let stringlength = result.val().name.length
                        console.log(stringlength)
    
                        if (stringlength > 15) {
                            txt_online += '\n' + (result.val().name).slice(0, 15) + '...'
                            kb_online.push([{
                                text: 'üü¢ ' + (result.val().name).slice(0, 15) + '...',
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        if (stringlength <= 15){
                            txt_online += '\n' + result.val().name
                            kb_online.push([{
                                text: 'üü¢ ' + result.val().name,
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
    
                        num_online++
                    }
    
                    if (result.val().status === 'waiting'){
    
                        if (num_waiting === 0) txt_waiting += '\n\n<b>üü° –û–∂–∏–¥–∞—é—Ç:</b>'
    
                        let stringlength = result.val().name.length
                        console.log(stringlength)
    
                        if (stringlength > 15) {
                            txt_waiting += '\n' + (result.val().name).slice(0, 15) + '...'
                            kb_waiting.push([{
                                text: 'üü° ' + (result.val().name).slice(0, 15) + '...',
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        if (stringlength <= 15){
                            txt_waiting += '\n' + result.val().name
                            kb_waiting.push([{
                                text: 'üü° ' + result.val().name,
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        num_waiting++
                    }
    
                    if (result.val().status === 'canceled'){
    
                        if (num_canceled === 0) txt_canceled += '\n\n<b>üî¥ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã:</b>'
    
                        let stringlength = result.val().name.length
                        console.log(stringlength)
    
                        if (stringlength > 15) {
                            txt_canceled += '\n' + (result.val().name).slice(0, 15) + '...'
                            kb_canceled.push([{
                                text: 'üî¥ ' + (result.val().name).slice(0, 15) + '...',
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        if (stringlength <= 15){
                            txt_canceled += '\n' + result.val().name
                            kb_canceled.push([{
                                text: 'üî¥ ' + result.val().name,
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        num_canceled++
                    }
    
                    if (result.val().status === 'offline'){
    
                        if (num_offline === 0) txt_offline += '\n\n<b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>'
    
                        let stringlength = result.val().name.length
                        console.log(stringlength)
    
                        if (stringlength > 15) {
                            txt_offline += '\n' + (result.val().name).slice(0, 15) + '...'
                            kb_offline.push([{
                                text: '‚úÖ ' + (result.val().name).slice(0, 15) + '...',
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        if (stringlength <= 15){
                            txt_offline += '\n' + result.val().name
                            kb_offline.push([{
                                text: '‚úÖ ' + result.val().name,
                                callback_data: 'opendonation_' +  donationnames[chat.id][i]
                            }])
                        }
                        num_offline++
                    }
    
                    if (i === donationnames[chat.id].length - 1){
                        txt += txt_online + txt_waiting + txt_canceled + txt_offline
                        txt += '\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–±–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É(-–∏) –Ω–∏–∂–µ'
                        console.log('here')
                        kb.push([{
                            text: backtomain[0],
                            callback_data: backtomain[1]
                        },
                        {
                            text: '‚ûï –ù–æ–≤—ã–π —Å–±–æ—Ä',
                            callback_data: whoareyoubutton[1]
                        }])
                        if (kb_online.length > 0){
                            for (let x=0; x < kb_online.length; x++){
                                kb.push(kb_online[x])
                            }
                        }
                        
                        if (kb_waiting.length > 0) {
                            for (let y=0; y < kb_waiting.length; y++){
                                kb.push(kb_waiting[y])
                            }
                        }
                        
                        if (kb_canceled.length > 0){
                            for (let z=0; z < kb_canceled.length; z++){
                                kb.push(kb_canceled[z])
                            }
                        }
                        
                        if (kb_offline.length > 0){
                            for (let b=0; b< kb_offline.length; b++){
                                kb.push(kb_offline[b])
                            }
                        }
    
                        bot.sendMessage(chat.id, txt, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: kb
                            }
                        })
                        .then(res => {
                            message_toedit[chat.id][0] = res.message_id
                        })
                        .catch(err => {console.log('here: ' + err)})
                    }
                    
                })
    
                
            }
        }
    
        if (query.data.includes(checkparticipantsbutton[1])){
            let donationdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + (query.data).split('_')[1] + '/participants')
            donationdata.get().then(result => {
                console.log('Kickstarter/users/' + chat.id + '/donations/' + query.data.split('_')[1] + '/participants')
                let txt = '<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> \n\n'
                for (let i = 0; i < result.val().length; i++){
                    txt += '<a href="tg://user?id='+ result.val()[i].id +'">'+  result.val()[i].name +'</a>, '
                    if (i === result.val().length - 1){
                        bot.sendMessage(chat.id, txt, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            message_toedit[chat.id][1] = res.message_id
                        })
                    }
                }
            })
        }
    
        if (query.data === publicdonationlist[1]){
            GlobalDonationList(chat)
        }
    
        if (query.data.includes('opendonation_')){
            OpenDonation(chat, (query.data).split('_')[1])
        }
    
        if (query.data.includes('opendonationparticipant_')){
            OpenDonationParticipant(chat, (query.data).split('_')[1] + '/donations/' + (query.data).split('_')[2])
        }
    
        if (query.data.includes(finishdonation[1])){
            if (query.data.includes(finishdonation[1] + '_0_')){
                let txt = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–±–æ—Ä? –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—ã—Ä—É—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–±–æ—Ä–∞ - –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª. \n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å'
                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: 'opendonation_' + query.data.split('_')[2]
                            },
                            {
                                text: finishdonation[0],
                                callback_data: finishdonation[1] + '_1_' + query.data.split('_')[2]
                            }]
                        ]
                    }
                }).catch(err => {
                    console.log('here: ' + err)
                    bot.editMessageCaption(txt, {
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: 'opendonation_' + query.data.split('_')[2]
                                },
                                {
                                    text: finishdonation[0],
                                    callback_data: finishdonation[1] + '_1_' + query.data.split('_')[2]
                                }]
                            ]
                        }
                    })
                })
            }
            if (query.data.includes(finishdonation[1] + '_1_')){
                FinishDonation(chat, query.data.split('_')[2])
            }
        }
    
        if (query.data.includes(canceldonation[1])){
            if (query.data.includes(canceldonation[1] + '_0_')){
                let txt = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä? –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –Ω–æ –æ–Ω–∏ –Ω–µ —É–≤–∏–¥—è—Ç –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å'
                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: 'opendonation_' + query.data.split('_')[2]
                            },
                            {
                                text: canceldonation[0],
                                callback_data: canceldonation[1] + '_1_' + query.data.split('_')[2]
                            }]
                        ]
                    }
                }).catch(err => {
                    console.log('here: ' + err)
                    bot.editMessageCaption(txt, {
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: 'opendonation_' + query.data.split('_')[2]
                                },
                                {
                                    text: canceldonation[0],
                                    callback_data: canceldonation[1] + '_1_' + query.data.split('_')[2]
                                }]
                            ]
                        }
                    })
                })
            }
            if (query.data.includes(canceldonation[1] + '_1_')){
                CancelDonation(chat, query.data.split('_')[2])
            }
        }
    
        if (query.data.includes(editmaterial[1])){
            donate_editmaterials[chat.id] = true
            donate_tempdonateid[chat.id] = query.data.split('_')[1]
            console.log('lol:' + query.data)
    
            bot.sendMessage(chat.id, newdonationsteps[6], {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backeditmaterial[0],
                            callback_data: backeditmaterial[1]
                        }]
                    ]
                }
            })
            .then(res => {
                message_toedit[chat.id][1] = res.message_id
            })
            .catch(err => {console.log('here: ' + err)})
        }

        if (query.data.includes(editpreview[1])){
            donate_editpreview[chat.id] = true
            donate_tempdonateid[chat.id] = query.data.split('_')[1]
            console.log('lol:' + query.data)
    
            bot.sendMessage(chat.id, newdonationsteps[4], {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backeditpreview[0],
                            callback_data: backeditpreview[1]
                        }]
                    ]
                }
            })
            .then(res => {
                message_toedit[chat.id][1] = res.message_id
            })
            .catch(err => {console.log('here: ' + err)})
        }
    
        if (query.data === backeditmaterial[1]){
            console.log('heere')
            donate_editmaterials[chat.id] = false
            bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
        }
        if (query.data === backeditpreview[1]){
            console.log('heere')
            donate_editmaterials[chat.id] = false
            bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
        }
    
        if (query.data === sborprivacy[1]){
            donate_private[chat.id] = false
            donateregisterstep[chat.id] = 6
            if (donate_materials[chat.id] !== ''){
                bot.editMessageText(newdonationsteps[7], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[4]
                            }],
                            [{
                                text: previewimg[2],
                                callback_data: previewimg[3]
                            }]
                        ]
                    }
                })
            }
            if (donate_materials[chat.id] === ''){
                bot.editMessageText(newdonationsteps[6], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[4]
                            }],
                            [{
                                text: previewimg[2],
                                callback_data: previewimg[3]
                            }]
                        ]
                    }
                })
            }
        }
    
        if (query.data === sborprivacy[3]){
            donate_private[chat.id] = true
            donateregisterstep[chat.id] = 6
            if (donate_materials[chat.id] !== ''){
                bot.editMessageText(newdonationsteps[7], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[4]
                            }],
                            [{
                                text: previewimg[2],
                                callback_data: previewimg[3]
                            }]
                        ]
                    }
                })
            }
            if (donate_materials[chat.id] === ''){
                bot.editMessageText(newdonationsteps[6], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[4]
                            }],
                            [{
                                text: previewimg[2],
                                callback_data: previewimg[3]
                            }]
                        ]
                    }
                })
            }
        }
    
        if (query.data === previewimg[3]){
    
            donateregisterstep[chat.id] = 5
            bot.editMessageText(newdonationsteps[5], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[3]
                        }],
                        [{
                            text: ihavematerials[0],
                            callback_data: ihavematerials[1]
                        },
                        {
                            text: ihavematerials[2],
                            callback_data: ihavematerials[3]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === createdonation[1]){
            let registerdata = fb.database().ref('Kickstarter/users/' + chat.id)
            registerdata.get().then(result => {
    
                let updates = {}
                let newdonation = {
                    name: donate_name[chat.id],
                    money: donate_money[chat.id],
                    minmoney: donate_minmoney[chat.id],
                    duration: donate_duration_secs[chat.id],
                    sendduration: donate_sendduration_secs[chat.id],
                    privacy: donate_private[chat.id],
                    photo: donate_photo[chat.id],
                    status: 'online',
                    bank: 0,
                    materials: donate_materials[chat.id]
                }
                let freeaut = fb.database().ref('Kickstarter/mailing')
                freeaut.get().then(reply => {
                    if (!reply.val().authors.includes(chat.id)){
                        if (!reply.val().free_authors.includes(chat.id)){
                            let new_updates = {}
                            if (reply.val().free_authors === ''){
                                new_updates['Kickstarter/mailing/free_authors'] = (chat.id).toString()
                            }
                            if (reply.val().free_authors !== ''){
                                new_updates['Kickstarter/mailing/free_authors'] = reply.val().free_authors + ',' + chat.id
                            }
                            fb.database().ref().update(new_updates)
                        }
                    }
                })
                
    
                /* if (donate_private[chat.id] === false){
                    let publicdon = fb.database().ref('Kickstarter/gallery/donations')
                    publicdon.get().then(reply => {
                        let donation_updates = {}
                        if (reply.val() !== undefined && result.exists()){
                            donation_updates['Kickstarter/gallery/donations/'+reply.val().length+'/user_id'] = chat.id
                            donation_updates['Kickstarter/gallery/donations/'+reply.val().length+'/name'] = donate_name[chat.id]
                            donation_updates['Kickstarter/gallery/donations/'+reply.val().length+'/donation_id'] = donate_duration_secs[chat.id]
                        }
                        else {
                            donation_updates['Kickstarter/gallery/donations/0/user_id'] = chat.id
                            donation_updates['Kickstarter/gallery/donations/0/name'] = donate_name[chat.id]
                            donation_updates['Kickstarter/gallery/donations/0/donation_id'] = donate_duration_secs[chat.id]
                        }
                        fb.database().ref().update(donation_updates)
                    })
                    
                } */
    
    
                if (!result.exists()) {
                    console.log('USER DIDNT REGISTER YET')
                    updates['Kickstarter/users/' + chat.id + '/profile/id'] = chat.id
                    updates['Kickstarter/users/' + chat.id + '/profile/name'] = chat.first_name
                    
                    updates['Kickstarter/users/' + chat.id + '/balance/bank'] = 0
                    updates['Kickstarter/users/' + chat.id + '/balance/comission'] = 10
                    updates['Kickstarter/users/' + chat.id + '/balance/overall'] = 0
                    updates['Kickstarter/users/' + chat.id + '/balance/withdrew'] = 0
                    updates['Kickstarter/users/' + chat.id + '/balance/withdroval_limit'] = 3000 //–º–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
                }
    
                updates['Kickstarter/users/' + chat.id + '/donations/' + donate_duration_secs[chat.id]] = newdonation
                fb.database().ref().update(updates)
                .then(() => {
                    bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
                    Auth(chat)
                })
            })
        }
    
        if (query.data === backtonewdonate[6]){
            if (donate_materials[chat.id] === 'null'){
                donate_materials[chat.id] = 'null'
                donateregisterstep[chat.id] = 6
                if (msg.text.includes('https://')){
                    bot.editMessageText(newdonationsteps[7], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: backtonewdonate[5]
                                }]
                            ]
                        }
                    })
                }
            }
            else {
                donate_photo[chat.id] = ''
                donateregisterstep[chat.id] = 6
                bot.editMessageText(newdonationsteps[6], {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: backtonewdonate[4]
                            }],
                            [{
                                text: previewimg[2],
                                callback_data: previewimg[3]
                            }]
                        ]
                    }
                })
            }
        }
    
        if (query.data === ihavematerials[3]){
            CreateDonation(chat)
        }
    
        if (query.data === backtonewdonate[5]){
            donate_photo[chat.id] = ''
            donateregisterstep[chat.id] = 6
            bot.editMessageText(newdonationsteps[6], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[4]
                        }],
                        [{
                            text: previewimg[2],
                            callback_data: previewimg[3]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === backtonewdonate[4]){
            donate_materials[chat.id] = 'null'
            bot.editMessageText(newdonationsteps[5], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[3]
                        }],
                        [{
                            text: ihavematerials[0],
                            callback_data: ihavematerials[1]
                        },
                        {
                            text: ihavematerials[2],
                            callback_data: ihavematerials[3]
                        }]
                    ]
                }
            })
    
            bot.editMessageText(newdonationsteps[5], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[3]
                        }],
                        [{
                            text: sborprivacy[2],
                            callback_data: sborprivacy[3]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === backtonewdonate[3]){
            donateregisterstep[chat.id] = 5
            donate_photo[chat.id] = ''
    
            bot.editMessageText(newdonationsteps[4], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[2]
                        }],
                        [{
                            text: previewimg[2],
                            callback_data: previewimg[3]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === backtonewdonate[2]){
            donateregisterstep[chat.id] = 4
            donate_duration[chat.id] = 0
    
            bot.editMessageText(newdonationsteps[3], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[1]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === backtonewdonate[1]){
            donateregisterstep[chat.id] = 3
            donate_minmoney[chat.id] = 0
    
            bot.editMessageText(newdonationsteps[2], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[0]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === backtonewdonate[0]){
            donateregisterstep[chat.id] = 2
            donate_money[chat.id] = 0
    
            bot.editMessageText(newdonationsteps[1], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: whoareyoubutton[1]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === ihavematerials[1]){
            donate_materials[chat.id] = 'null'
            donateregisterstep[chat.id] = 6
    
            bot.editMessageText(newdonationsteps[6], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[4]
                        }],
                        [{
                            text: ihavematerials[2],
                            callback_data: ihavematerials[3]
                        }]
                    ]
                }
            })
        }
    
        if (query.data === balancehistory[1]){
            bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
    
            let balancedata = fb.database().ref('Kickstarter/users/' + chat.id)
            balancedata.get().then(result => {
                if (result.val().balance.history !== undefined){
                    let txt = '<b>–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n'
    
                    for(let i = 0; i < result.val().balance.history.length; i++){
                        let created_date = new Date(result.val().balance.history[i].date)
                        let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
        
                        txt += '\n<b>' + createddate + ':</b> ' +  result.val().balance.history[i].description
        
                        if (i === result.val().balance.history.length - 1){
                            bot.editMessageText(txt, {
                                parse_mode: 'HTML',
                                chat_id: chat.id,
                                message_id: message_toedit[chat.id][0],
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: backtostart[0],
                                            callback_data: mybalancebutton[1]
                                        }]
                                    ]
                                }
                            })
                        }
                    }
                }
                else {
                    bot.answerCallbackQuery({
                        callback_query_id: query.id,
                        text: 'üò¢ –í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
                        show_alert: true
                    })
                }
            })
        }
    
        if (query.data === opendonationparticipant){
            OpenDonationParticipant(chat, null)
        }
    
        //–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
        if (query.data === mybalancebutton[1]){
            myBalance(chat)
        }
        if (query.data === addmoneybutton[1]){
            AddMoney(chat, false)
        }
        if (query.data === addmoneyparticipant[1]){
            AddMoney(chat, true)
        }
        if (query.data.includes(addmoneyamount)){ 
    
            let amount = query.data.split('_')[1]
    
            let date = new Date()
            let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
            let timeOfffset = 6 //Astana GMT +6
            let time_now = new Date(utcTime + (3600000 * timeOfffset))
    
            billid[chat.id] = time_now.getTime()
            
            const params = {
                publicKey,
                amount: amount,
                billId: time_now.getTime(),
                successUrl: 'https://merchant.com/payment/success?billId=' + time_now.getTime()
            };
            
            const link = qiwiApi.createPaymentForm(params)
            console.log(link)
    
            let txt = ''
            if (user_donationlink[chat.id] !== undefined && user_donationlink[chat.id] !== null) {
                txt += '<b>–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ('+ amount +' —Ä—É–±.), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:\n<a href="'+ link + '">https://oplata.qiwi.com/pay</a></b>'
            }
            if (user_donationlink[chat.id] === undefined || user_donationlink[chat.id] === null) {
                txt += messagetext_toedit[chat.id][0] + '\n\n<b>–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ('+ amount +' —Ä—É–±.), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:\n<a href="'+ link + '">https://oplata.qiwi.com/pay</a></b>'
            }
            
            bot.editMessageText(txt, {
                chat_id: chat.id,
                message_id: message_toedit[chat.id][0], 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: checkmoneyaddbutton[0],
                            callback_data: checkmoneyaddbutton[1],
                        }],
                        [{
                            text: backtostart[0],
                            callback_data: checkmoneyaddbutton[2],
                        }]
                    ]
                }
            })
    
        }
        if (query.data === checkmoneyaddbutton[1]){
    
            qiwiApi.getBillInfo(billid[chat.id]).then(data => {
                console.log(data)
                console.log(data.status.value)
                if (data.status.value === 'WAITING'){
                    bot.answerCallbackQuery({
                        callback_query_id: query.id,
                        text: '‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                        show_alert: true
                    })
                }
                else if (data.status.value === 'PAID'){
                    let addmoney_data = fb.database().ref('Kickstarter/users/' + chat.id + '/balance/')
                    addmoney_data.get().then(result => {
                        let updates = {}
    
                        let newaction = {
                            description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ' + parseInt(data.amount.value) + ' —Ä—É–±.',
                            date: parseInt(data.billId)
                        }
    
                        if (result.val().history !== undefined){
                            updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().history.length] = newaction
                        }
                        if (result.val().history === undefined){
                            updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newaction
                        }
    
                        updates['Kickstarter/users/' + chat.id + '/balance/bank'] = result.val().bank + parseInt(data.amount.value)
                        fb.database().ref().update(updates)
                        bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                        bot.answerCallbackQuery({
                            callback_query_id: query.id,
                            text: '‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω',
                            show_alert: true
                        }).catch(err => {console.log('here: ' + err)})
                        if (user_donationlink[chat.id] === undefined || user_donationlink[chat.id] === null){
                            myBalance(chat)
                        }
                        if (user_donationlink[chat.id] !== undefined && user_donationlink[chat.id] !== null){
                            OpenDonationParticipant(chat, null)
                        }
                        
                    })
                }
                else{
                    bot.answerCallbackQuery({
                        callback_query_id: query.id,
                        text: '‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫',
                        show_alert: true
                    })
                }
            }).catch(err => {
                console.log('bill err => ' + err)
                bot.answerCallbackQuery({
                    callback_query_id: query.id,
                    text: 'üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                    show_alert: true
                })
            });
        }
        if (query.data === checkmoneyaddbutton[2]){
            qiwiApi.getBillInfo(billid[chat.id]).then(data => {
                console.log(data)
                console.log(data.status.value)
                if (data.status.value === 'PAID'){
                    let addmoney_data = fb.database().ref('Kickstarter/users/' + chat.id + '/balance/')
                    addmoney_data.get().then(result => {
                        let updates = {}
                        updates['Kickstarter/users/' + chat.id + '/balance/bank'] = result.val().bank + data.amount.value
                        fb.database().ref().update(updates)
                        bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                        bot.answerCallbackQuery({
                            callback_query_id: query.id,
                            text: '‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω',
                            show_alert: true
                        }).catch(err => {console.log('here: ' + err)})
                    })
                }
                if (user_donationlink[chat.id] === undefined || user_donationlink[chat.id] === null){
                    AddMoney(chat, false)
                }
                if (user_donationlink[chat.id] !== undefined && user_donationlink[chat.id] !== null){
                    OpenDonationParticipant(chat, null)
                }
    
            }).catch(err => {
                console.log('bill err => ' + err)
                bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                if (user_donationlink[chat.id] === undefined || user_donationlink[chat.id] === null){
                    AddMoney(chat, false)
                }
                if (user_donationlink[chat.id] !== undefined && user_donationlink[chat.id] !== null){
                    OpenDonationParticipant(chat, null)
                }
            });
        }
    
        //–í–´–í–û–î
        if (query.data === withdrawbutton[1]){
            WithDrawInfo(chat)
            isAddingcardinfo[chat.id] = undefined
        }
        //–î–û–ë–ê–í–ò–¢–¨ –ò–ù–§–£ –ü–û –ö–ê–†–¢–ï
        if (query.data.includes(cardinfobutton[1])) {
            if (query.data === cardinfobutton[1] + '_0'){
                let txt = '–ö—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏? Qiwi –∏–ª–∏ –ÆMoney?'
                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: withdrawbutton[1]
                            }],
                            [{
                                text: 'ü•ù Qiwi',
                                callback_data: cardinfobutton[1] + '_1_' + 'qiwi'
                            },
                            {
                                text: 'üí∞ –Æ–ú–∞–Ω–∏',
                                callback_data: cardinfobutton[1] + '_1_' + 'yoomoney'
                            }]
                        ]
                    }
                })
            }
            if (query.data.includes(cardinfobutton[1] + '_1_')){
                let txt = ''    
                if (query.data.split('_')[2] === 'qiwi'){
                    txt = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä QIWI, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã —Å–æ —Å–±–æ—Ä–æ–≤\n\n<b>–ü—Ä–∏–º–µ—Ä: 79390000000</b> (11/12 –∑–Ω–∞–∫–æ–≤, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤)'
                    isAddingcardinfo[chat.id] = 'qiwi'
                }
                if (query.data.split('_')[2] === 'yoomoney'){
                    txt = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ÆMoney, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã —Å–æ —Å–±–æ—Ä–æ–≤. <b>–ù–µ –ø—É—Ç–∞–π—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã!</b>\n\n<b>–ü—Ä–∏–º–µ—Ä: 4100000000000000</b> (16 –∑–Ω–∞–∫–æ–≤, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤)'
                    isAddingcardinfo[chat.id] = 'yoomoney'
                }

                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: withdrawbutton[1]
                            }]
                        ]
                    }
                })
            }
        }
        //–í–´–í–ï–°–¢–ò –í–°–ï
        if (query.data.includes(withdrawallbutton[1])){
            if (query.data.split('_')[1] === '0'){
                let txt = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞?\n\n–ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + query.data.split('_')[2] + '%'
                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: withdrawbutton[1]
                            },
                            {
                                text: '–î–∞',
                                callback_data: withdrawallbutton[1] + '_1'
                            }]
                        ]
                    }
                })
            }
            if (query.data.split('_')[1] === '1'){
                let balancedata = fb.database().ref('Kickstarter/users/' + chat.id)
                balancedata.get().then(result => {
                    //–°–æ–∑–¥–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ—Ç–∫–µ –∞–¥–º–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è
                    //1. –ò–º—è –∞–≤—Ç–æ—Ä–∞
                    //2. chat.id –∞–≤—Ç–æ—Ä–∞
                    //3. –î–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    //4. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                    //5. –°—É–º–º—É –≤—ã–≤–æ–¥–∞
                    //6. –ö–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞: –• —Ä—É–±. (–£%)
                    //7. –†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã–≤–æ–¥–∞
    
                    let date = new Date()
                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                    let timeOfffset = 6 //Astana GMT +6
                    let time_now = new Date(utcTime + (3600000 * timeOfffset))
    
                    let updates = {}
                    let newrequest = {
                        name: chat.first_name,
                        id: chat.id,
                        date: time_now.getTime(),
                        bank: result.val().balance.bank,
                        withdraw_amount: result.val().balance.bank,
                        comission: result.val().balance.comission,
                        card: result.val().balance.card,
                        status: 'WAITING'
                    }
    
                    let newaction = {
                        description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().balance.bank + '  —Ä—É–±.',
                        date: time_now.getTime()
                    }
    
                    updates['Kickstarter/payments/withdraw_requests/' + time_now.getTime()] = newrequest
    
                    let pending_withdrawal = 0
                    if (result.val().balance.pending_withdrawal !== null && result.val().balance.pending_withdrawal !== undefined) pending_withdrawal = result.val().balance.pending_withdrawal
                    updates['Kickstarter/users/' + chat.id + '/balance/pending_withdrawal'] = pending_withdrawal + result.val().balance.bank
                    updates['Kickstarter/users/' + chat.id + '/balance/bank'] = 0
    
                    if (result.val().balance.history !== undefined) {
                        updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
    
                    if (result.val().balance.history === undefined) {
                        updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newaction
                    }
    
                    //–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    let txt_admin = 'üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç <b><a href="tg://user?id='+ chat.id +'">'+ chat.first_name +'</a></b>'
                    txt_admin += '\n\n<b>–î–∞—Ç–∞:</b> ' + time_now.toString()
                    txt_admin += '\n<b>–ë–∞–ª–∞–Ω—Å:</b> ' + result.val().balance.bank
                    txt_admin += '\n<b>–í—ã–≤–æ–¥–∏—Ç:</b> ' + result.val().balance.bank
                    txt_admin += '\n<b>–ö–∞—Ä—Ç–∞:</b> ' + result.val().balance.card
                    txt_admin += '\n\n<b>–ö–æ–º–∏—Å—Å–∏—è: ' + Math.floor(result.val().balance.bank / 100 * result.val().balance.comission) + ' —Ä—É–±–ª–µ–π ('+ result.val().balance.comission +'%)</b>'
                
                    fb.database().ref().update(updates)
    
                    let generaldata = fb.database().ref('Kickstarter/')
                    generaldata.get().then(res => {
                        bot.sendMessage(res.val().payments.info.moderator_id, txt_admin, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: acceptwithdrawal[0],
                                        callback_data: acceptwithdrawal[1] + '_' + time_now.getTime()
                                    },
                                    {
                                        text: declinewithdrawal[0],
                                        callback_data: declinewithdrawal[1] + '_' + time_now.getTime()
                                    }]
                                ]
                            }
                        })
                        .then(resulting => {
                            if (messagetext_toedit[res.val().payments.info.moderator_id] === undefined) messagetext_toedit[res.val().payments.info.moderator_id] = []
                            if (message_toedit[res.val().payments.info.moderator_id] === undefined) message_toedit[res.val().payments.info.moderator_id] = []
                            messagetext_toedit[res.val().payments.info.moderator_id][3] = resulting.text
                            message_toedit[res.val().payments.info.moderator_id][3] = resulting.message_id
                        })
    
                        let txt = '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().balance.bank + ' —Ä—É–±. –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ —Ç—Ä–µ—Ö –¥–Ω–µ–π'
                        txt += '\n\n<i>–ï—Å–ª–∏ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="tg://user?id='+ res.val().payments.info.moderator_id +'">–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</a></i>'
                        bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
                        bot.sendMessage(chat.id, txt, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–ü–æ–Ω—è—Ç–Ω–æ',
                                        callback_data: backtostart[1]
                                    }]
                                ]
                            }
                        })
                    })
                    
                    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–¥–∞–Ω –∏ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
    
                })
            }
        }
        //–í–´–í–ï–°–¢–ò –°–í–û–Æ –°–£–ú–ú–£
        if (query.data.includes(withdrawcustombutton[1])){
            if (query.data.split('_')[1] === '0'){
                let balancedata = fb.database().ref('Kickstarter/users/' + chat.id + '/balance')
                balancedata.get().then(result => {
                    let kb = []
                    let procents = [Math.floor(result.val().bank  * 0.25), Math.floor(result.val().bank  * 0.5), Math.floor(result.val().bank  * 0.75), Math.floor(result.val().bank)]
                    let txt = '<b>–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å?</b>\n–ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + query.data.split('_')[2] + '%'
                    
                    kb[0] = [{
                        text: backtostart[0],
                        callback_data: withdrawbutton[1]
                    }]
                    if (Math.floor(result.val().bank  * 0.25) >= result.val().withdroval_limit){
                        kb.push([{
                            text: procents[0] + '—Ä—É–±. (25%)',
                            callback_data: withdrawcustombutton[1] + '_1_' + procents[0]
                        }])
                    }
                    if (Math.floor(result.val().bank  * 0.5) >= result.val().withdroval_limit){
                        kb.push([{
                            text: procents[1] + '—Ä—É–±. (50%)',
                            callback_data: withdrawcustombutton[1] + '_1_' + procents[1]
                        }])
                    }
                    if (Math.floor(result.val().bank  * 0.75) >= result.val().withdroval_limit){
                        kb.push([{
                            text: procents[2] + '—Ä—É–±. (75%)',
                            callback_data: withdrawcustombutton[1] + '_1_' + procents[2]
                        }])
                    }
                    kb.push([{
                        text: procents[3] + '—Ä—É–±. (100%)',
                        callback_data: withdrawcustombutton[1] + '_1_' + procents[3]
                    }])
    
                    bot.editMessageText(txt, {
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    })
                })
            }
            if (query.data.split('_')[1] === '1'){
                let balancedata = fb.database().ref('Kickstarter/users/' + chat.id)
                balancedata.get().then(result => {
                    //–°–æ–∑–¥–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ—Ç–∫–µ –∞–¥–º–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è
                    //1. –ò–º—è –∞–≤—Ç–æ—Ä–∞
                    //2. chat.id –∞–≤—Ç–æ—Ä–∞
                    //3. –î–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    //4. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                    //5. –°—É–º–º—É –≤—ã–≤–æ–¥–∞
                    //6. –ö–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞: –• —Ä—É–±. (–£%)
                    //7. –†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã–≤–æ–¥–∞
    
                    console.log(parseInt(query.data.split('_')[2]))
    
                    let date = new Date()
                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                    let timeOfffset = 6 //Astana GMT +6
                    let time_now = new Date(utcTime + (3600000 * timeOfffset))
    
                    let updates = {}
                    let newrequest = {
                        name: chat.first_name,
                        id: chat.id,
                        date: time_now.getTime(),
                        bank: result.val().balance.bank,
                        withdraw_amount: parseInt(query.data.split('_')[2]),
                        comission: result.val().balance.comission,
                        card: result.val().balance.card,
                        status: 'WAITING'
                    }
    
                    let newaction = {
                        description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + parseInt(query.data.split('_')[2]) + '  —Ä—É–±.',
                        date: time_now.getTime()
                    }
    
                    updates['Kickstarter/payments/withdraw_requests/' + time_now.getTime()] = newrequest
    
                    let pending_withdrawal = 0
                    if (result.val().balance.pending_withdrawal !== null && result.val().balance.pending_withdrawal !== undefined) pending_withdrawal = result.val().balance.pending_withdrawal
                    updates['Kickstarter/users/' + chat.id + '/balance/pending_withdrawal'] = pending_withdrawal + parseInt(query.data.split('_')[2])
                    updates['Kickstarter/users/' + chat.id + '/balance/bank'] = result.val().balance.bank - parseInt(query.data.split('_')[2])
    
                    if (result.val().balance.history !== undefined) {
                        updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
    
                    if (result.val().balance.history === undefined) {
                        updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newaction
                    }
    
                    //–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    let txt_admin = 'üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç <b><a href="tg://user?id='+ chat.id +'">'+ chat.first_name +'</a></b>'
                    txt_admin += '\n\n<b>–î–∞—Ç–∞:</b> ' + time_now.toString()
                    txt_admin += '\n<b>–ë–∞–ª–∞–Ω—Å:</b> ' + result.val().balance.bank
                    txt_admin += '\n<b>–í—ã–≤–æ–¥–∏—Ç:</b> ' + parseInt(query.data.split('_')[2])
                    txt_admin += '\n<b>–ö–∞—Ä—Ç–∞:</b> ' + result.val().balance.card
                    txt_admin += '\n\n<b>–ö–æ–º–∏—Å—Å–∏—è: ' + Math.floor(parseInt(query.data.split('_')[2]) / 100 * result.val().balance.comission) + ' —Ä—É–±–ª–µ–π ('+ result.val().balance.comission +'%)</b>'
                
                    fb.database().ref().update(updates)
    
                    let generaldata = fb.database().ref('Kickstarter/')
                    generaldata.get().then(res => {
                        bot.sendMessage(res.val().payments.info.moderator_id, txt_admin, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: acceptwithdrawal[0],
                                        callback_data: acceptwithdrawal[1] + '_' + time_now.getTime()
                                    },
                                    {
                                        text: declinewithdrawal[0],
                                        callback_data: declinewithdrawal[1] + '_' + time_now.getTime()
                                    }]
                                ]
                            }
                        })
                        .then(resulting => {
                            if (messagetext_toedit[res.val().payments.info.moderator_id] === undefined) messagetext_toedit[res.val().payments.info.moderator_id] = []
                            if (message_toedit[res.val().payments.info.moderator_id] === undefined) message_toedit[res.val().payments.info.moderator_id] = []
                            messagetext_toedit[res.val().payments.info.moderator_id][3] = resulting.text
                            message_toedit[res.val().payments.info.moderator_id][3] = resulting.message_id
                        })
    
                        let txt = '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + parseInt(query.data.split('_')[2]) + ' —Ä—É–±. –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ —Ç—Ä–µ—Ö –¥–Ω–µ–π'
                        txt += '\n\n<i>–ï—Å–ª–∏ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="tg://user?id='+ res.val().payments.info.moderator_id +'">–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</a></i>'
                        bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
                        bot.sendMessage(chat.id, txt, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–ü–æ–Ω—è—Ç–Ω–æ',
                                        callback_data: backtostart[1]
                                    }]
                                ]
                            }
                        })
                    })
                    
                    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–¥–∞–Ω –∏ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
    
                })
            }
        }
        //–ü–†–ò–ù–Ø–¢–¨ –ò –û–¢–ü–†–ê–í–ò–¢–¨ –î–ï–ù–¨–ì–ò –í–´–í–û–î
        if (query.data.includes(acceptwithdrawal[1])){
            let generaldata = fb.database().ref('Kickstarter/')
            generaldata.get().then(res => {
                let withdrawdata = fb.database().ref('Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1])
                withdrawdata.get().then(result => {
                    if (chat.id === res.val().payments.info.moderator_id){
                        let comission_amount = result.val().withdraw_amount / 100 * result.val().comission
                        let withdraw_amount = result.val().withdraw_amount - comission_amount
                        let comment = '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–æ—Ç–∞. –ö–æ–¥: ' + query.data.split('_')[1]
                        let comment_admin = '–í—ã–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ —Å –±–æ—Ç–∞. –ö–æ–¥: ' + query.data.split('_')[1]
                        let updates = {}
    
                        let txt = ''
                        sendPayment(result.val().card.split(':')[0], result.val().card.split(':')[1], withdraw_amount, comment).then(answ => {
                            txt += '‚úÖ –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã'
                            console.log(answ)
    
                            sendPayment('yoomoney', res.val().payments.info.yoomoney, comission_amount, comment_admin).then(() => {
                                txt += '\n‚úÖ –ö–æ–º–∏—Å—Å–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞'
                                updates['Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1] + '/status'] = 'SUCCESS'
                                if (messagetext_toedit[res.val().payments.info.moderator_id] === undefined) messagetext_toedit[res.val().payments.info.moderator_id] = []
                                if (message_toedit[res.val().payments.info.moderator_id] === undefined) message_toedit[res.val().payments.info.moderator_id] = []
    
                                bot.editMessageText(txt + '\n\n' + messagetext_toedit[res.val().payments.info.moderator_id][3], {
                                    chat_id: res.val().payments.info.moderator_id,
                                    message_id: message_toedit[res.val().payments.info.moderator_id][3],
                                    parse_mode: 'HTML',
                                })
        
                                let authordata = fb.database().ref('Kickstarter/users/' + result.val().id)
                                authordata.get().then(reply => {
        
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let time_now = new Date(utcTime + (3600000 * timeOfffset))
        
                                    let created_date = new Date(result.val().date)
                                    let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
        
                                    updates['Kickstarter/users/' + result.val().id + '/balance/pending_withdrawal'] = reply.val().balance.pending_withdrawal - result.val().withdraw_amount
                                    updates['Kickstarter/users/' + result.val().id + '/balance/withdrew'] = reply.val().balance.withdrew + result.val().withdraw_amount
                                    
                                    let newaction = {
                                        description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç ' + createddate + '. –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–®–ù–û ('+result.val().withdraw_amount+' —Ä—É–±. –≤—ã–≤–µ–¥–µ–Ω–æ)',
                                        date: time_now.getTime()
                                    }
                                    if (reply.val().balance.history !== undefined) {
                                        updates['Kickstarter/users/' + result.val().id + '/balance/history/' + reply.val().balance.history.length] = newaction
                                    }
                    
                                    if (reply.val().balance.history === undefined) {
                                        updates['Kickstarter/users/' + result.val().id + '/balance/history/0'] = newaction
                                    }
        
                                    fb.database().ref().update(updates)
        
                                    let success_txt = '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().withdraw_amount + ' —Ä—É–±. –æ—Ç ' + createddate + ' –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –í–∞—à —Å—á–µ—Ç (' + result.val().card.split(':')[1] + ')'
    
                                    bot.sendMessage(result.val().id, success_txt, {
                                        parse_mode: 'HTML'
                                    })
                                    .then(msgansw => {
                                        message_toedit[result.val().id][1] = msgansw.message_id
                                    })
                                    
                                })
                            })
                            .catch(err => {
                                console.log(err)
                                txt += '\n‚ùå –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞. –û—à–∏–±–∫–∞: ' + err
                                updates['Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1] + '/status'] = 'SUCCESS_HALF'
                            
                                if (messagetext_toedit[res.val().payments.info.moderator_id] === undefined) messagetext_toedit[res.val().payments.info.moderator_id] = []
                                if (message_toedit[res.val().payments.info.moderator_id] === undefined) message_toedit[res.val().payments.info.moderator_id] = []
    
                                bot.editMessageText(txt + '\n\n' + messagetext_toedit[res.val().payments.info.moderator_id][3], {
                                    chat_id: res.val().payments.info.moderator_id,
                                    message_id: message_toedit[res.val().payments.info.moderator_id][3],
                                    parse_mode: 'HTML',
                                })
        
                                let authordata = fb.database().ref('Kickstarter/users/' + result.val().id)
                                authordata.get().then(reply => {
        
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let time_now = new Date(utcTime + (3600000 * timeOfffset))
        
                                    let created_date = new Date(result.val().date)
                                    let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
        
                                    updates['Kickstarter/users/' + result.val().id + '/balance/pending_withdrawal'] = reply.val().balance.pending_withdrawal - result.val().withdraw_amount
                                    updates['Kickstarter/users/' + result.val().id + '/balance/withdrew'] = reply.val().balance.withdrew + result.val().withdraw_amount
                                    
                                    let newaction = {
                                        description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç ' + createddate + '. –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–®–ù–û ('+result.val().withdraw_amount+' —Ä—É–±. –≤—ã–≤–µ–¥–µ–Ω–æ)',
                                        date: time_now.getTime()
                                    }
                                    if (reply.val().balance.history !== undefined) {
                                        updates['Kickstarter/users/' + result.val().id + '/balance/history/' + reply.val().balance.history.length] = newaction
                                    }
                    
                                    if (reply.val().balance.history === undefined) {
                                        updates['Kickstarter/users/' + result.val().id + '/balance/history/0'] = newaction
                                    }
        
                                    fb.database().ref().update(updates)
        
                                    let success_txt = '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().withdraw_amount + ' —Ä—É–±. –æ—Ç ' + createddate + ' –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –í–∞—à —Å—á–µ—Ç (' + result.val().card.split(':')[1] + ')'
    
                                    bot.sendMessage(result.val().id, success_txt, {
                                        parse_mode: 'HTML'
                                    })
                                    .then(msgansw => {
                                        message_toedit[result.val().id][1] = msgansw.message_id
                                    })
                                    
                                })
                            })
                        })
                        .catch(error => {
                            console.log(error)
                            txt += '‚ùå –î–µ–Ω—å–≥–∏ –∏ –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã. –û—à–∏–±–∫–∞: ' + error
    
                            if (messagetext_toedit[res.val().payments.info.moderator_id] === undefined) messagetext_toedit[res.val().payments.info.moderator_id] = []
                            if (message_toedit[res.val().payments.info.moderator_id] === undefined) message_toedit[res.val().payments.info.moderator_id] = []
    
                            bot.editMessageText(txt + '\n\n' + messagetext_toedit[res.val().payments.info.moderator_id][3], {
                                chat_id: res.val().payments.info.moderator_id,
                                message_id: message_toedit[res.val().payments.info.moderator_id][3],
                                parse_mode: 'HTML',
                            })
    
                            updates['Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1] + '/status'] = 'ERROR'
                            let authordata = fb.database().ref('Kickstarter/users/' + result.val().id)
                            authordata.get().then(reply => {
    
                                let date = new Date()
                                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                let timeOfffset = 6 //Astana GMT +6
                                let time_now = new Date(utcTime + (3600000 * timeOfffset))
    
                                let created_date = new Date(result.val().date)
                                let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
    
                                updates['Kickstarter/users/' + result.val().id + '/balance/pending_withdrawal'] = reply.val().balance.pending_withdrawal - result.val().withdraw_amount
                                updates['Kickstarter/users/' + result.val().id + '/balance/bank'] = reply.val().balance.bank + result.val().withdraw_amount
                                
                                let newaction = {
                                    description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç ' + createddate + '. –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–¢–ö–õ–û–ù–ï–ù–û (–¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞)',
                                    date: time_now.getTime()
                                }
                                if (reply.val().balance.history !== undefined) {
                                    updates['Kickstarter/users/' + result.val().id + '/balance/history/' + reply.val().balance.history.length] = newaction
                                }
                
                                if (reply.val().balance.history === undefined) {
                                    updates['Kickstarter/users/' + result.val().id + '/balance/history/0'] = newaction
                                }
    
                                fb.database().ref().update(updates)
    
                                let error_txt = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().withdraw_amount + ' —Ä—É–±. –æ—Ç ' + createddate
                                error_txt = '\n–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞'
                                error_txt = '\n‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞'
                                error_txt += '\n\n –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ —Ä–µ—à–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="tg://user?id='+ res.val().payments.info.moderator_id +'">–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</a>'
                                
                                bot.sendMessage(result.val().id, error_txt, {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{
                                                text: '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                                                url: 'tg://user?id=' + res.val().payments.info.moderator_id
                                            }]
                                        ]
                                    }
                                })
                                .then(msgansw => {
                                    message_toedit[result.val().id][1] = msgansw.message_id
                                })
                                
                            })
                            
                        })
                    }
                })
            })
        }
        if (query.data.includes(declinewithdrawal[1])){
    
            let generaldata = fb.database().ref('Kickstarter/')
            generaldata.get().then(res => {
                let withdrawdata = fb.database().ref('Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1])
                withdrawdata.get().then(result => {
                    let txt = '‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥'
            
                    bot.editMessageText(txt + '\n\n' + messagetext_toedit[res.val().payments.info.moderator_id][3], {
                        chat_id: res.val().payments.info.moderator_id,
                        message_id: message_toedit[res.val().payments.info.moderator_id][3],
                        parse_mode: 'HTML',
                    })
                    let updates = {}
                    updates['Kickstarter/payments/withdraw_requests/' + query.data.split('_')[1] + '/status'] = 'ERROR'
                    let authordata = fb.database().ref('Kickstarter/users/' + result.val().id)
                    authordata.get().then(reply => {
            
                        let date = new Date()
                        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                        let timeOfffset = 6 //Astana GMT +6
                        let time_now = new Date(utcTime + (3600000 * timeOfffset))
            
                        let created_date = new Date(result.val().date)
                        let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
            
                        updates['Kickstarter/users/' + result.val().id + '/balance/pending_withdrawal'] = reply.val().balance.pending_withdrawal - result.val().withdraw_amount
                        updates['Kickstarter/users/' + result.val().id + '/balance/bank'] = reply.val().balance.bank + result.val().withdraw_amount
                        
                        let newaction = {
                            description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç ' + createddate + '. –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–¢–ö–õ–û–ù–ï–ù–û (–¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞)',
                            date: time_now.getTime()
                        }
                        if (reply.val().balance.history !== undefined) {
                            updates['Kickstarter/users/' + result.val().id + '/balance/history/' + reply.val().balance.history.length] = newaction
                        }
            
                        if (reply.val().balance.history === undefined) {
                            updates['Kickstarter/users/' + result.val().id + '/balance/history/0'] = newaction
                        }
            
                        fb.database().ref().update(updates)
            
                        let error_txt = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ' + result.val().withdraw_amount + ' —Ä—É–±. –æ—Ç ' + createddate + ' –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –µ–≥–æ <b>–æ—Ç–∫–ª–æ–Ω–∏—Ç—å</b>'
                        error_txt = '\n–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞'
                        error_txt = '\n‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞'
                        error_txt += '\n\n –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ —Ä–µ—à–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="tg://user?id='+ res.val().payments.info.moderator_id +'">–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</a>'
                                
                        bot.sendMessage(result.val().id, error_txt, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                                        url: 'tg://user?id=' + res.val().payments.info.moderator_id
                                    }]
                                ]
                            }
                        })
                        .then(msgansw => {
                            message_toedit[result.val().id][1] = msgansw.message_id
                        })
                        
                    })
                })
            })
        }
    
        //–ü–†–ò–ù–Ø–¢–¨ –£–ß–ê–°–¢–ò–ï –í –°–ë–û–†–ï
        if (query.data.includes(participatebutton[1])){
            let userdata = fb.database().ref('Kickstarter/users/' + chat.id)
            userdata.get().then(result => {
                if (result.val().balance.bank >= parseInt(query.data.split('_')[1])){
                    //–¥–µ–Ω—å–≥–∏ –µ—Å—Ç—å
                    let txt = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ —Å–±–æ—Ä, –ª–∏–±–æ –≤–Ω–µ—Å–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —É—á–∞—Å—Ç–∏—è: <b>' + query.data.split('_')[1] + ' —Ä—É–± </b>(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É)'
                    txt += '\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å—É–º–º—É –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (–¥–æ '+ result.val().balance.bank +' —Ä—É–±), —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Å–±–æ—Ä –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–±–æ—Ä–∞ ü•∞'
                    participating_data[chat.id] = []
                    participating_data[chat.id][0] = true
                    participating_data[chat.id][1] = parseInt(query.data.split('_')[1])
                    participating_data[chat.id][2] = result.val().balance.bank
    
                    bot.editMessageText(txt, {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_toedit[chat.id][0],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtostart[0],
                                    callback_data: opendonationparticipant
                                }],
                                [{
                                    text: query.data.split('_')[1] + ' —Ä—É–±. (–º–∏–Ω.)',
                                    callback_data: 'participate_' + query.data.split('_')[1]
                                }]
                            ]
                        }
                    })
                    .catch(err => {
                        console.log('here: ' + err)
                        bot.editMessageCaption(txt, {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: message_toedit[chat.id][0],
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: backtostart[0],
                                        callback_data: opendonationparticipant
                                    }],
                                    [{
                                        text: query.data.split('_')[1] + ' —Ä—É–±. (–º–∏–Ω)',
                                        callback_data: 'participate_' + query.data.split('_')[1]
                                    }]
                                ]
                            }
                        })
                    })
                }
    
                else {
                    let txt = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–±–æ—Ä–µ.\n–í–∞–º –Ω—É–∂–Ω–æ –µ—â–µ <b>' + (parseInt(query.data.split('_')[1]) - result.val().balance.bank) + ' —Ä—É–±.</b>'
                    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                    bot.sendMessage(chat.id, txt, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: addmoneyparticipant[0],
                                    callback_data: addmoneyparticipant[1]
                                }]
                            ]
                        }
                    }).then(res => {
                        if (messagetext_toedit[chat.id] === undefined) messagetext_toedit[chat.id] = []
                        if (message_toedit[chat.id] === undefined) message_toedit[chat.id] = []
                        messagetext_toedit[chat.id][1] = res.text
                        message_toedit[chat.id][1] = res.message_id
                    })
                }
            })
        }
    
        //–ü–†–ò–ù–Ø–¢–¨ –£–ß–ê–°–¢–ò–ï –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–£–ú–ú–û–ô
        if (query.data.includes('participate_')){
            ParticipateDonation(chat, query.data.split('_')[1])
        }
    
        //–°–ü–ò–°–û–ö –°–ë–û–†–û–í
        if (query.data === myparticipantslist[1]){
            MyParticipateDonationsList(chat)
        }
    }

    if (message_toedit[chat.id] === undefined){
        Start(query.message)
    }
})

bot.on('channel_post', post => {
    console.log(post)
})

bot.onText(/\/balance/, msg =>
{
    const { chat, message_id, text } = msg
    myBalance(chat)
})

bot.onText(/\/faq/, msg =>
{
    const { chat, message_id, text } = msg
    if (!current_mode[chat.id].includes('evaluating')){
        let txt = '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: \n\n' + faqquestions[0] + faqquestions[1] + faqquestions[2]
        bot.deleteMessage(chat.id, message_id)
        bot.deleteMessage(chat.id, message_toedit[chat.id][2]).catch(err => {console.log('here: ' + err)})
        bot.sendMessage(chat.id, txt, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backtoblank[0],
                        callback_data: openmenubutton[1]
                    }]
                ]
            }
        })
        .then(res=> {
            message_toedit[chat.id][2] = res.message_id
        })
    }
    
    
})

//–ù—É–∂–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è chatid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/Admin_controller:GetChatInfo" –∏ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.
bot.onText(/\/Admin_controller:GetChatInfo/, msg =>
    {
        //console.log(msg)
        const chatId = msg.chat.id
        bot.sendMessage(chatId, chatId)
    
})

bot.onText(/\/Admin_controller:CheckDonationsRenew/, msg =>
{
    //console.log(msg)
    const chatId = msg.chat.id
    CheckDeadlinesList(true)
})

bot.onText(/\/Admin_controller:CheckDonations/, msg =>
{
    //console.log(msg)
    const chatId = msg.chat.id
    CheckDeadlinesList(false)
})

function CreateDonation(chat){
    donateregisterstep[chat.id] = 0
    donate_sendduration[chat.id] = 3

    bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})

    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 6 //Astana GMT +6
    let finaldate = new Date(utcTime + (3600000 * timeOfffset))

    donate_duration_secs[chat.id] = finaldate.getTime() + (donate_duration[chat.id] * 86400 * 1000)
    donate_sendduration_secs[chat.id] = donate_duration_secs[chat.id] + (donate_sendduration[chat.id] * 86400 * 1000)

    let created_date = new Date(donate_duration_secs[chat.id])
    let createddate = created_date.getDate() + '.' + (created_date.getMonth() + 1)
    console.log(createddate)

    let txt = '<b><a href="tg://user?id='+ chat.id +'">'+ chat.first_name +'</a></b> —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–∞: <b>' +  donate_name[chat.id] + '</b>\n\n‚îú –°–æ–±—Ä–∞–Ω–æ —Å–µ–π—á–∞—Å: <b>0%</b>\n‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —É—á–∞—Å—Ç–∏—è: <b>' + donate_minmoney[chat.id] + ' —Ä—É–±.</b>\n‚îî –°–±–æ—Ä –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: <b>' + createddate + '</b>'
    
    bot.getMe().then(res => {
        /* if (donate_private[chat.id] === false) txt += '\n–¢–∏–ø —Å–±–æ—Ä–∞: <b>–æ—Ç–∫—Ä—ã—Ç—ã–π</b>'
        if (donate_private[chat.id] === true) txt += '\n–¢–∏–ø —Å–±–æ—Ä–∞: <b>–∑–∞–∫—Ä—ã—Ç—ã–π</b>' */
        txt += '\n\n–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–ù–ï –ù–ê–ñ–ò–ú–ê–ô–¢–ï!): https://t.me/'+ res.username +'?start=_part_' + chat.id + '_' + donate_duration_secs[chat.id]
        txt += '\n\n–ï—Å–ª–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>' + createdonation[0] + '</b>'
    
        bot.sendPhoto(chat.id, donate_photo[chat.id], {
            caption: txt,
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backtostart[0],
                        callback_data: backtonewdonate[4]
                    }],
                    [{
                        text: createdonation[0],
                        callback_data: createdonation[1]
                    }]
                ]
            }
        })
        .then(res => {
            message_toedit[chat.id][0] = res.message_id
        })
        .catch(err => {
            console.log('here: ' + err)
            bot.sendMessage(chat.id, txt, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtostart[0],
                            callback_data: backtonewdonate[4]
                        }],
                        [{
                            text: createdonation[0],
                            callback_data: createdonation[1]
                        }]
                    ]
                }
            })
            .then(res => {
                message_toedit[chat.id][0] = res.message_id
                console.log('here:')
            })
            .catch(err => {console.log('here: ' + err)})
        })
    }).catch(err => {console.log('here: ' + err)})
}

function ParticipateDonation(chat, text){
    let updates = {}
    let userdata = fb.database().ref('Kickstarter/users/' + chat.id)
    userdata.get().then(result => {
        if (result.val().participants !== null && result.val().participants !== undefined && result.val().participants !== ''){
            updates['Kickstarter/users/' + chat.id + '/participants'] = result.val().participants + ',' + user_donationlink[chat.id].split('/donations/')[0] + '.' + user_donationlink[chat.id].split('/donations/')[1]
        }
        else {
            updates['Kickstarter/users/' + chat.id + '/participants'] = user_donationlink[chat.id].split('/donations/')[0] + '.' + user_donationlink[chat.id].split('/donations/')[1]
        }
        let donationdata = fb.database().ref('Kickstarter/users/' + user_donationlink[chat.id])
        donationdata.get().then(reply => {
            let date = new Date()
            let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
            let timeOfffset = 6 //Astana GMT +6
            let finaldate = new Date(utcTime + (3600000 * timeOfffset))

            let newparticipant = {
                id: chat.id,
                date: finaldate.getTime(),
                amount: parseInt(text),
                name: chat.first_name
            }
            if (reply.val().participants === undefined || reply.val().participants === undefined){
                updates['Kickstarter/users/' + user_donationlink[chat.id] + '/participants/0'] = newparticipant
            }
            if (reply.val().participants !== undefined && reply.val().participants !== undefined){
                updates['Kickstarter/users/' + user_donationlink[chat.id] + '/participants/' + reply.val().participants.length] = newparticipant
            }
            updates['Kickstarter/users/' + user_donationlink[chat.id] + '/bank'] = reply.val().bank += parseInt(text)
            updates['Kickstarter/users/' + chat.id + '/balance/bank'] = result.val().balance.bank -= parseInt(text)
            
            let newhistory = {
                date: finaldate.getTime(), 
                description: '–£—á–∞—Å—Ç–∏–µ –≤ —Å–±–æ—Ä–µ ' + user_donationlink[chat.id].split('/donations/')[0] + '.' + user_donationlink[chat.id].split('/donations/')[1] + ' –∑–∞ ' + parseInt(text) + ' —Ä—É–±.'
            }
            if (result.val().balance.history === undefined || result.val().balance.history === undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newhistory
            }
            if (result.val().balance.history !== undefined && result.val().balance.history !== undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().balance.history.length] = newhistory
            }

            fb.database().ref().update(updates).then(() => {
                participating_data[chat.id] = []
                OpenDonationParticipant(chat, null)
            })
            
        })
        
    })
}

function WithDrawInfo(chat){
    let balancedata = fb.database().ref('Kickstarter/users/' + chat.id)
    balancedata.get().then(result => {
        let txt = ''
        let kb = []
        kb[0] = [{
            text: backtostart[0],
            callback_data: mybalancebutton[1]
        }]

        kb[1] = [{
            text: cardinfobutton[0],
            callback_data: cardinfobutton[1] + '_0'
        }]

        if (result.val().balance.bank > 0) {
            if (result.val().balance.bank > result.val().balance.withdroval_limit){
                txt += '<b>üíµ –°—Ä–µ–¥—Å—Ç–≤–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ' + result.val().balance.bank + ' —Ä—É–±–ª–µ–π'
                txt += '\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑–æ–º, –∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É.\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> '+result.val().balance.withdroval_limit+' —Ä—É–±–ª–µ–π'
                
                if (result.val().balance.card !== undefined && result.val().balance.card !== '' && (result.val().balance.card).includes(':')){
                    kb[2] = 
                    [{
                        text: withdrawallbutton[0],
                        callback_data: withdrawallbutton[1] + '_0_' + result.val().balance.comission
                    },
                    {
                        text: withdrawcustombutton[0],
                        callback_data: withdrawcustombutton[1] + '_0_' + result.val().balance.comission
                    }]
                }
            }
            else {
                txt += '<b>üíµ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> ' + result.val().balance.bank + ' —Ä—É–±–ª–µ–π\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Ö–æ—Ç—è–±—ã '+result.val().balance.withdroval_limit+' —Ä—É–±–ª–µ–π'
            }
        }

        if (result.val().balance.bank <= 0) {
            txt += '<b>üíµ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> ' + result.val().balance.bank + ' —Ä—É–±–ª–µ–π\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Ö–æ—Ç—è–±—ã '+result.val().balance.withdroval_limit+' —Ä—É–±–ª–µ–π'
        }

        if (result.val().balance.card === undefined || result.val().balance.card === ''){
            txt += '\n\n‚ÄºÔ∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>' + cardinfobutton[0] + '</b>'
        }

        if (result.val().balance.card !== undefined && result.val().balance.card !== '' && (result.val().balance.card).includes(':')){
            if (result.val().balance.card.includes('qiwi')){
                txt += '\n\nü•ù <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä Qiwi:</b> ' + result.val().balance.card.split(':')[1]
            }
            if (result.val().balance.card.includes('yoomoney')){
                txt += '\n\n<b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç –ÆMoney:</b> ' + result.val().balance.card.split(':')[1]
            }
        }

        bot.editMessageText(txt, {
            chat_id: chat.id,
            message_id: message_toedit[chat.id][0],
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: kb
            }
        })
    })
}

function myBalance(chat){

    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
    bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
    let balancedata = fb.database().ref('Kickstarter/users/' + chat.id)
    balancedata.get().then(result => {
        let txt = 'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>' + result.val().balance.bank + ' —Ä—É–±.</b>'
        let kb = []
        kb[0] = 
        [{
            text: addmoneybutton[0],
            callback_data: addmoneybutton[1]
        },
        {
            text: balancehistory[0],
            callback_data: balancehistory[1]
        }]

        console.log(result.val().donations)
        if (result.val().donations !== undefined){

            let donatetitles = Object.keys(result.val().donations)
            
            let donationbank_overall = 0 
            for (let i = 0; i < donatetitles.length; i++){
                let donatebankdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + donatetitles[i])
                donatebankdata.get().then(res => {

                    if (res.val().status === 'online' || res.val().status === 'waiting'){
                        donationbank_overall += res.val().bank
                    }

                    if (i === donatetitles.length - 1){
                        if (result.val().balance.pending_withdrawal !== undefined && result.val().balance.pending_withdrawal !== null && result.val().pending_withdrawal !== 0){
                            txt += '\n‚îú –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞: <b>' + result.val().balance.pending_withdrawal + ' —Ä—É–±.</b>'
                        }
                        if (donationbank_overall > 0){
                            txt += '\n‚îú –í –∑–∞–º–æ—Ä–æ–∑–∫–µ (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã): <b>' + donationbank_overall + ' —Ä—É–±.</b>'
                        }
                        
                        txt += '\n‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>' + result.val().balance.overall + ' —Ä—É–±.</b>'
                        txt += '\n‚îî –í—ã–≤–µ–¥–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>' + result.val().balance.withdrew + ' —Ä—É–±.</b>'
                        
                        kb[1] = [{
                            text: withdrawbutton[0],
                            callback_data: withdrawbutton[1]
                        }]

                        kb.push([{
                            text: backtostart[0],
                            callback_data: backtostart[1]
                        }])

                        bot.sendMessage(chat.id, txt, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: kb
                            }
                        })
                        .then(answer => {
                            message_toedit[chat.id][0] = answer.message_id
                        })
                
                        if (messagetext_toedit[chat.id] === undefined) messagetext_toedit[chat.id] = []
                        messagetext_toedit[chat.id][0] = txt
                    }
                })
            }
        }

        if (result.val().donations === undefined){
            kb.push([{
                text: backtostart[0],
                callback_data: backtostart[1]
            }])
    
            bot.sendMessage(chat.id, txt, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: kb
                }
            })
            .then(answer => {
                message_toedit[chat.id][0] = answer.message_id
            })
    
            if (messagetext_toedit[chat.id] === undefined) messagetext_toedit[chat.id] = []
            messagetext_toedit[chat.id][0] = txt
        }
    })
}

function AddMoney(chat, isparticipant){
    let txt = ''

    let addmoneykeyboard = [[],[]]
    if (!isparticipant){
        txt += messagetext_toedit[chat.id][0] + '\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:' 
        addmoneykeyboard[1] = [{
            text: backtoblank[0],
            callback_data: mybalancebutton[1]
        }]
    }
    if (isparticipant){
        txt += '–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:' 
        addmoneykeyboard[1] = [{
            text: backtoblank[0],
            callback_data: checkchannelfollow[1] + '_1'
        }]
    }
    let addmoney_data = fb.database().ref('Kickstarter/payments/addmoney/')
    addmoney_data.get().then(result => {
        addmoneykeyboard[0] = []
        for (let i = 0; i < result.val().length; i++){
            addmoney[i] = result.val()[i]
            addmoneykeyboard[0].push(
                {
                    text: addmoney[i] + ' —Ä—É–±.',
                    callback_data: addmoneyamount + addmoney[i]
                }
            )
            if (i === result.val().length - 1){
                bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
                bot.editMessageText(txt, {
                    chat_id: chat.id,
                    message_id: message_toedit[chat.id][0],
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: addmoneykeyboard
                    }
                })
                .then(res => {
                    message_toedit[chat.id][0] = res.message_id
                })
            }
        }
    })
}

function CheckNewMails(chatid){
    let newmails = fb.database().ref('Grindr/users/' + chatid + '/dialogs/')
    newmails.on('value', (result) => {
        if (result.val() !== null){
            console.log(result.val())
            if (current_mode[chatid].split('_')[0] === 'dialog'  && current_mode[chatid].split('_')[1] === result.val()[result.val().length - 1]){
                bot.sendMessage(chatid, result.val()[result.val().length - 1].lastmessage)
            }
            else {
                bot.sendMessage(chatid, '–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>' + result.val()[result.val().length - 1] + '</b>' + result.val().lastmessage + '–ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å?', {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: answermessage[0],
                                callback_data: answermessage[1] + result.val()[result.val().length - 1]
                            },
                            {
                                text: '–ù–µ—Ç',
                                callback_data: 'deletemessage'
                            }]
                        ]
                    }
                })
                .then(res => {
                    message_todelete[chatid][1] = res.message_id
                })
            }
        }
    }
    ).catch(err => {console.log(err)})
}

function OpenDonation(chat, link){
    let donationdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + link)
    donationdata.get().then(result => {

        let endday = new Date(result.val().duration)
        let end_day = endday.getDate() + '.' + (endday.getMonth() + 1)

        let sendmaterialsday = new Date(result.val().sendduration)
        let materials_day = sendmaterialsday.getDate() + '.' + (sendmaterialsday.getMonth() + 1)

        bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(error => {console.log(error)})
        bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(error => {console.log(error)})
    
        let txt = '<b><a href="tg://user?id='+ chat.id +'">'+ chat.first_name +'</a></b> —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–∞: <b>' + result.val().name + '</b>\n'
        txt += '\n–°–±–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: <b>' + end_day + '</b>\n' 
        txt += '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ: <b>' + materials_day + '</b>\n\n'
        
        txt += '–°–æ–±—Ä–∞–Ω–æ: <b>' + result.val().bank + ' —Ä—É–±. –∏–∑ ' + result.val().money + ' —Ä—É–±. (' + Math.floor((100*result.val().bank) / result.val().money) + '%)</b>\n'
        if (result.val().participants === undefined || result.val().participants === null){
            txt += '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>0</b>\n'
        }
        if (result.val().participants !== undefined && result.val().participants !== null){
            txt += '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>'+ result.val().participants.length +'</b>\n'
        }

        if (result.val().materials !== 'null' && result.val().materials !== ''){
            txt += '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: <b>–î–∞</b>\n' 
        }

        if (result.val().materials === 'null' || result.val().materials === ''){
            txt += '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: <b>–ù–µ—Ç!</b>\n' 
        }

        bot.getMe().then(res => {
            if (result.val().privacy === false) txt += '\n–¢–∏–ø —Å–±–æ—Ä–∞: <b>–æ—Ç–∫—Ä—ã—Ç—ã–π</b>'
            if (result.val().privacy === true) txt += '\n–¢–∏–ø —Å–±–æ—Ä–∞: <b>–∑–∞–∫—Ä—ã—Ç—ã–π</b>'
            txt += '\n–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–ù–ï –ù–ê–ñ–ò–ú–ê–ô–¢–ï!): https://t.me/'+ res.username +'?start=_part_' + chat.id + '_' + link
            
            let kb = []
            kb.push([{
                text: backtomain[0],
                callback_data: mydonationslist[1]
            }])
            if (result.val().status === 'online'){
                kb.push([{
                    text: editmaterial[0],
                    callback_data: editmaterial[1] + '_' + link
                }])
                kb.push([{
                    text: editpreview[0],
                    callback_data: editpreview[1] + '_' + link
                }])
                kb.push([{
                    text: canceldonation[0],
                    callback_data: canceldonation[1] + '_0_' + link
                }])
            }
            if (result.val().status === 'waiting'){
                if (result.val().materials === 'null' || result.val().materials === ''){
                    kb.push([{
                        text: editmaterial[0],
                        callback_data: editmaterial[1] + '_' + link
                    }])
                    kb.push([{
                        text: editpreview[0],
                        callback_data: editpreview[1] + '_' + link
                    }])
                }
                if (result.val().materials.includes('https://')){
                    kb.push([{
                        text: finishdonation[0],
                        callback_data: finishdonation[1] + '_0_' + link
                    }])
                }
                kb.push([{
                    text: canceldonation[0],
                    callback_data: canceldonation[1] + '_0_' + link
                }])
            }
            
            
            if (result.val().participants !== undefined && result.val().participants.length > 0){
                kb.push([{
                    text: checkparticipantsbutton[0],
                    callback_data: checkparticipantsbutton[1] + '_' + link
                }])
            }

            bot.sendPhoto(chat.id, result.val().photo, {
                caption: txt,
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: kb
                }
            })
            .then(res => {
                message_toedit[chat.id][0] = res.message_id
            })
            .catch(err => {
                console.log('here: ' + err)
                bot.sendMessage(chat.id, txt, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: kb
                    }
                })
                .then(res => {
                    message_toedit[chat.id][0] = res.message_id
                })
                .catch(err => {console.log('here: ' + err)})
            })
        })
        
    })
}

function CancelDonation(chat, link){

    console.log('canceled')
    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 6 //Astana GMT +6
    let currenttime = new Date(utcTime + (3600000 * timeOfffset))

    let donationdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + link)
    donationdata.get().then(reply => {
        let updates = {}
        updates['Kickstarter/users/' + chat.id + '/donations/' + link + '/status'] = 'canceled'
        updates['Kickstarter/users/' + chat.id + '/donations/' + link + '/bank'] = 0
    
        BankCancelation(reply.val(), currenttime.getTime())

        let authorslists = fb.database().ref('Kickstarter/users/' + chat.id)
        authorslists.get().then(result => {
            
            let newaction = {
                date: currenttime.getTime(),
                description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+chat.id+'.'+link +' –∏–∑–º–µ–Ω–µ–Ω –í–∞–º–∏ –Ω–∞ –û–¢–ú–ï–ù–ï–ù.'
            }
            if (result.val().balance.history !== undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().balance.history.length] = newaction
            }
            if (result.val().balance.history === undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newaction
            }

            fb.database().ref().update(updates).then(() => {
                let txt_author = 'üî¥ –í–∞—à —Å–±–æ—Ä <b>"' + reply.val().name + '"</b> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b>'
                bot.sendMessage(chat.id, txt_author, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: 'opendonation_' + link
                            }]
                        ]
                    }
                })
            })
        })

        /* if (reply.val().privacy === false){
            let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
            publicdonationdata.get().then(result => {
                let donation_updates = {}
                for (let i = 0; i < result.val().length; i++){
                    if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === link){
                        donation_updates['Kickstarter/gallery/donations/' + i] = null
                        fb.database().ref().update(donation_updates)
                    }
                }
            })
        } */
        
    })
}

function FinishDonation(chat, link){
    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 6 //Astana GMT +6
    let currenttime = new Date(utcTime + (3600000 * timeOfffset))

    let donationdata = fb.database().ref('Kickstarter/users/' + chat.id + '/donations/' + link)
    donationdata.get().then(reply => {
        let updates = {}
        updates['Kickstarter/users/' + chat.id + '/donations/' + link + '/status'] = 'offline'
        MaterialsMailing(reply.val(), reply.val().materials)

        let authorslists = fb.database().ref('Kickstarter/users/' + chat.id)
        authorslists.get().then(result => {
            updates['Kickstarter/users/' + chat.id + '/donations/' + link + '/bank'] = 0
            updates['Kickstarter/users/' + chat.id + '/balance/bank'] = result.val().balance.bank + reply.val().bank
            
            let newaction = {
                date: currenttime.getTime(),
                description: '–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–±–æ—Ä–∞ '+chat.id+'.'+ link +'. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: +' + reply.val().bank + ' —Ä—É–±.'
            }
            if (result.val().balance.history !== undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/' + result.val().balance.history.length] = newaction
            }
            if (result.val().balance.history === undefined){
                updates['Kickstarter/users/' + chat.id + '/balance/history/0'] = newaction
            }
            
            let txt_author = 'ü•≥ –°–±–æ—Ä <b>"' + reply.val().name + '"</b> –∑–∞–∫—Ä—ã—Ç!\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–±–æ—Ä–∞, –∞ –Ω–∞ –í–∞—à —Å—á–µ—Ç –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>' + reply.val().bank + ' —Ä—É–±.</b>'
            
            fb.database().ref().update(updates).then(() => {
                bot.sendMessage(chat.id, txt_author, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backtostart[0],
                                callback_data: 'opendonation_' + link
                            }]
                        ]
                    }
                })
                .then(res => {
                    if (message_toedit[chat.id] === undefined) message_toedit[chat.id] = []
                    if (messagetext_toedit[chat.id] === undefined) messagetext_toedit[chat.id] = []
                    messagetext_toedit[chat.id][1] = res.text
                    message_toedit[chat.id][1] = res.message_id
                })
            })
            
        })

        /* if (reply.val().privacy === false){
            let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
            publicdonationdata.get().then(result => {
                let donation_updates = {}
                for (let i = 0; i < result.val().length; i++){
                    if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === link){
                        donation_updates['Kickstarter/gallery/donations/' + i] = null
                        fb.database().ref().update(donation_updates)
                    }
                }
            })
        } */
    })
}

function OpenDonationParticipant(chat, linkref){
    let link = user_donationlink[chat.id]
    if (linkref !== null) link = linkref
    let donationdata = fb.database().ref('Kickstarter/users/' + link)
    donationdata.get().then(result => {
        let authordata = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
        authordata.get().then(reply => {
            let endday = new Date(result.val().duration)
            let end_day = endday.getDate() + '.' + (endday.getMonth() + 1)
    
            let sendmaterialsday = new Date(result.val().duration)
            let materials_day = sendmaterialsday.getDate() + '.' + (sendmaterialsday.getMonth() + 1)
    
            bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(error => {console.log('here: ' + error)})
            let txt = ''
            let kb = []
            kb[0] = [{
                text: backtostart[0],
                callback_data: backtomain[1]
            }]
            if (result.val().participants === undefined || result.val().participants === null){
                if (result.val().status === 'online' && link.split('/donations/')[0] !== (chat.id).toString()){
                    kb.push([{
                        text: participatebutton[0] + '(' + result.val().minmoney + ' —Ä—É–±.)',
                        callback_data: participatebutton[1] + '_' + result.val().minmoney
                    }])
                }
            }
            if (result.val().participants !== undefined && result.val().participants !== null){
                for (let i = 0; i< result.val().participants.length; i++){
                    if (result.val().participants[i].id === chat.id){
                        if (result.val().status === 'online'){
                            kb.push([{
                                text: '‚úÖ –í—ã - —É—á–∞—Å—Ç–Ω–∏–∫ ('+ result.val().participants[i].amount +' —Ä—É–±.)',
                                callback_data: 'emptyhandler'
                            }])
                        }
                        if (result.val().status === 'offline'){
                            kb.push([{
                                text: 'üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                url: result.val().materials
                            }])
                        }
                    }
                    if (i === result.val().participants.length - 1 && result.val().participants[i].id !== chat.id){
                        if (result.val().status === 'online' && link.split('/donations/')[0] !== (chat.id).toString()){
                            kb.push([{
                                text: participatebutton[0] + '(' + result.val().minmoney + ' —Ä—É–±.)',
                                callback_data: participatebutton[1] + '_' + result.val().minmoney
                            }])
                        }
                    }
                } 
            }

            if (result.val().status === 'canceled') txt  = 'üî¥ <b>–°–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n'
            if (result.val().status === 'offline') txt  = '‚úÖ <b>–°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n'
            if (result.val().status === 'waiting') txt  = 'üü° <b>–°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n'

            txt += '<b><a href="tg://user?id='+ reply.val().profile.id +'">'+ reply.val().profile.name +'</a></b> —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–∞: <b>' + result.val().name + '</b>\n'
            
            if (result.val().duration !== 0 && result.val().sendduration !== 0){
                txt += '\n–°–±–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: <b>' + end_day + '</b>\n'

                if (result.val().materials !== 'null' && result.val().materials !== ''){
                    txt += '–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: <b>–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ</b>\n\n'
                }
        
                if (result.val().materials === 'null' || result.val().materials === ''){
                    txt += '–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: <b>' + materials_day + '</b>\n\n'
                }
                
                if (result.val().status === 'online'){
                    txt += '–°–æ–±—Ä–∞–Ω–æ: <b>' + Math.floor((100*result.val().bank) / result.val().money) + '%</b>\n'
                }
            }

            if (result.val().duration === 0 && result.val().sendduration === 0){
                txt += '\n<b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É</b>\n'
            }
            

            if (result.val().participants === undefined || result.val().participants === null){
                txt += '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n'
            }
            if (result.val().participants !== undefined && result.val().participants !== null){
                txt += '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>'+ result.val().participants.length +'</b>\n\n'
            }
    
            //txt += '–ú–∏–Ω. —Å—É–º–º–∞ —É—á–∞—Å—Ç–∏—è: <b>' + result.val().minmoney + ' —Ä—É–±.</b>\n'
    
            bot.getMe().then(res => {
                if (result.val().privacy === false) txt += '–¢–∏–ø —Å–±–æ—Ä–∞: <b>–æ—Ç–∫—Ä—ã—Ç—ã–π</b>'
                if (result.val().privacy === true) txt += '–¢–∏–ø —Å–±–æ—Ä–∞: <b>–∑–∞–∫—Ä—ã—Ç—ã–π</b>'
                txt += '\n–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–¥–ª—è –¥—Ä—É–∑–µ–π): https://t.me/'+ res.username +'?start=_part_' + link.split('/donations/')[0] + '_' + link.split('/donations/')[1]
    
                bot.sendPhoto(chat.id, result.val().photo, {
                    caption: txt,
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: kb
                    }
                })
                .then(res => {
                    message_toedit[chat.id][0] = res.message_id
                })
                .catch(err => {
                    console.log('here: ' + err)
                    bot.sendMessage(chat.id, txt, {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    })
                    .then(res => {
                        message_toedit[chat.id][0] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                })
            })
        })
    })
}

function MyParticipateDonationsList(chat){
    donate_editmaterials[chat.id] = false
    donate_editpreview[chat.id] = false
        
    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
    bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(error => {console.log(error)})
    
    let txt = '<b>–°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ:</b>'

    //user_donations[chat.id] = []

    let kb = []

    let num_online = 0
    let txt_online = ''
    let kb_online = []

    let num_waiting = 0
    let txt_waiting = ''
    let kb_waiting = []

    let num_canceled = 0
    let txt_canceled = ''
    let kb_canceled = []
    
    let num_offline = 0
    let txt_offline = ''
    let kb_offline = []

    let participantsdata = fb.database().ref('Kickstarter/users/' + chat.id + '/participants/')
    participantsdata.get().then(reply => {
        //—É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —Ö–æ—Ç—è–±—ã 1 —Å–±–æ—Ä –µ—Å—Ç—å
        let donations = reply.val().split(',')
        for (let i = 0; i<donations.length; i++){
            let donationsdata = fb.database().ref('Kickstarter/users/' + donations[i].split('.')[0] + '/donations/' +  donations[i].split('.')[1])
            donationsdata.get().then(result => {
                if (result.val().status === 'online'){
                    if (num_online === 0) txt_online += '\n\n<b>üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã:</b>'
        
                    //user_donations[chat.id][num_online] = result.val()
        
                    let stringlength = result.val().name.length
                    console.log(stringlength)
        
                    if (stringlength > 15) {
                        txt_online += '\n' + (result.val().name).slice(0, 15) + '...'
                        kb_online.push([{
                            text: 'üü¢ ' + (result.val().name).slice(0, 15) + '...',
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    if (stringlength <= 15){
                        txt_online += '\n' + result.val().name
                        kb_online.push([{
                            text: 'üü¢ ' + result.val().name,
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
        
                    num_online++
                }
                if (result.val().status === 'waiting'){
        
                    if (num_waiting === 0) txt_waiting += '\n\n<b>üü° –û–∂–∏–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>'
        
                    let stringlength = result.val().name.length
                    console.log(stringlength)
        
                    if (stringlength > 15) {
                        txt_waiting += '\n' + (result.val().name).slice(0, 15) + '...'
                        kb_waiting.push([{
                            text: 'üü° ' + (result.val().name).slice(0, 15) + '...',
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    if (stringlength <= 15){
                        txt_waiting += '\n' + result.val().name
                        kb_waiting.push([{
                            text: 'üü° ' + result.val().name,
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    num_waiting++
                }
                if (result.val().status === 'canceled'){
        
                    if (num_canceled === 0) txt_canceled += '\n\n<b>üî¥ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã:</b>'
        
                    let stringlength = result.val().name.length
                    console.log(stringlength)
        
                    if (stringlength > 15) {
                        txt_canceled += '\n' + (result.val().name).slice(0, 15) + '...'
                        kb_canceled.push([{
                            text: 'üî¥ ' + (result.val().name).slice(0, 15) + '...',
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    if (stringlength <= 15){
                        txt_canceled += '\n' + result.val().name
                        kb_canceled.push([{
                            text: 'üî¥ ' + result.val().name,
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    num_canceled++
                }
                if (result.val().status === 'offline'){
        
                    if (num_offline === 0) txt_offline += '\n\n<b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>'
        
                    let stringlength = result.val().name.length
                    console.log(stringlength)
        
                    if (stringlength > 15) {
                        txt_offline += '\n' + (result.val().name).slice(0, 15) + '...'
                        kb_offline.push([{
                            text: '‚úÖ ' + (result.val().name).slice(0, 15) + '...',
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    if (stringlength <= 15){
                        txt_offline += '\n' + result.val().name
                        kb_offline.push([{
                            text: '‚úÖ ' + result.val().name,
                            callback_data: 'opendonationparticipant_' +  donations[i].split('.')[0] + '_' + donations[i].split('.')[1]
                        }])
                    }
                    num_offline++
                }
                if (i === donations.length - 1){
                    txt += txt_online + txt_waiting + txt_canceled + txt_offline
                    txt += '\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–±–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É(-–∏) –Ω–∏–∂–µ'
                    console.log('here')
                    kb.push([{
                        text: backtomain[0],
                        callback_data: backtomain[1]
                    }])
                    if (kb_online.length > 0){
                        for (let x=0; x < kb_online.length; x++){
                            kb.push(kb_online[x])
                        }
                    }
                    
                    if (kb_waiting.length > 0) {
                        for (let y=0; y < kb_waiting.length; y++){
                            kb.push(kb_waiting[y])
                        }
                    }
                    
                    if (kb_canceled.length > 0){
                        for (let z=0; z < kb_canceled.length; z++){
                            kb.push(kb_canceled[z])
                        }
                    }
                    
                    if (kb_offline.length > 0){
                        for (let b=0; b< kb_offline.length; b++){
                            kb.push(kb_offline[b])
                        }
                    }
        
                    bot.sendMessage(chat.id, txt, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    })
                    .then(res => {
                        message_toedit[chat.id][0] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                }
            })
        }
    })
}

function GlobalDonationList(chat){
        
    bot.deleteMessage(chat.id, message_toedit[chat.id][1]).catch(err => {console.log('here: ' + err)})
    bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(error => {console.log(error)})
    
    let txt = '<b>üîì –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–±–æ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π</b>'

    //user_donations[chat.id] = []

    let kb = []

    let donationlistdata = fb.database().ref('Kickstarter/gallery/donations')
    donationlistdata.get().then(result => {
        kb.push([{
            text: backtostart[0],
            callback_data: backtomain[1]
        }])
        for (let i = 0; i < result.val().length; i++){
            kb.push([{
                text: result.val()[i].name,
                callback_data: 'opendonationparticipant_' + result.val()[i].user_id + '_' + result.val()[i].donation_id
            }])
            if (i === result.val().length - 1){
                bot.sendMessage(chat.id, txt, {
                    parse_mode: 'HTML',
                })
                .then(res => {
                    message_toedit[chat.id][0] = res.message_id
                })
                .catch(err => {console.log('here: ' + err)})
            }
        }
    })
}

function CheckDeadlinesList(isRenew){
    let authorslists = fb.database().ref('Kickstarter/')
    authorslists.get().then(result => {
        if (result.val().mailing.authors !== ''){
            let authors = []
            if (result.val().mailing.authors.includes(',')){
                authors = (result.val().mailing.authors).split(',')
            }
            if (!result.val().mailing.authors.includes(',')){
                authors[0] = result.val().mailing.authors
            }

            if (isRenew){
                deelay(1000 * 86400).then(() => {CheckDeadlinesList(true)})
            }
            for (let x = 0; x < authors.length; x++) {
                let donationschekc = fb.database().ref('Kickstarter/users/' + authors[x] + '/donations')
                donationschekc.get().then(answ => {
                    let donations = Object.keys(answ.val())
                    for (let i = 0; i < donations.length; i++) {
                        let donationdata = fb.database().ref('Kickstarter/users/' + authors[x] + '/donations/' + donations[i])
                        donationdata.get().then(reply => {
                            if (reply.val().status === 'online' || reply.val().status === 'waiting'){
                                CheckDeadlines(authors[x] + '/donations/' + donations[i], reply.val())
                                console.log('started checking deadlines')
                            }
                        })
                    }
                })

                if (x === authors.length - 1){
                    bot.sendMessage(result.val().payments.info.moderator_id, '‚öôÔ∏è –í–µ–¥–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–æ–≤ ' + authors.length + ' VIP –∞–≤—Ç–æ—Ä–æ–≤')
                    .then(res => {
                        if (message_toedit[result.val().payments.info.moderator_id] === undefined) message_toedit[result.val().payments.info.moderator_id] = []
                        if (messagetext_toedit[result.val().payments.info.moderator_id] === undefined) messagetext_toedit[result.val().payments.info.moderator_id] = []
                        messagetext_toedit[result.val().payments.info.moderator_id][1] = res.text
                        message_toedit[result.val().payments.info.moderator_id][1] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                }
            }
        }
        if (result.val().mailing.free_authors !== ''){
            let authors = []
            if (result.val().mailing.free_authors.includes(',')){
                authors = (result.val().mailing.free_authors).split(',')
            }
            if (!result.val().mailing.free_authors.includes(',')){
                authors[0] = result.val().mailing.free_authors
            }

            if (isRenew){
                deelay(1000 * 86400).then(() => {CheckDeadlinesList(true)})
            }
            for (let x = 0; x < authors.length; x++) {
                let donationschekc = fb.database().ref('Kickstarter/users/' + authors[x] + '/donations')
                donationschekc.get().then(answ => {
                    let donations = Object.keys(answ.val())
                    for (let i = 0; i < donations.length; i++) {
                        let donationdata = fb.database().ref('Kickstarter/users/' + authors[x] + '/donations/' + donations[i])
                        donationdata.get().then(reply => {
                            if (reply.val().status === 'online' || reply.val().status === 'waiting'){
                                CheckDeadlines(authors[x] + '/donations/' + donations[i], reply.val())
                                console.log('started checking deadlines')
                            }
                        })
                    }
                })

                if (x === authors.length - 1){
                    bot.sendMessage(result.val().payments.info.moderator_id, '‚öôÔ∏è –í–µ–¥–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–æ–≤ ' + authors.length + ' –∞–≤—Ç–æ—Ä–æ–≤')
                    .then(res => {
                        if (message_toedit[result.val().payments.info.moderator_id] === undefined) message_toedit[result.val().payments.info.moderator_id] = []
                        if (messagetext_toedit[result.val().payments.info.moderator_id] === undefined) messagetext_toedit[result.val().payments.info.moderator_id] = []
                        messagetext_toedit[result.val().payments.info.moderator_id][1] = res.text
                        message_toedit[result.val().payments.info.moderator_id][1] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                }
            }
        }
    })
}

function CheckDeadlines(link, donationdata){

    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 6 //Astana GMT +6
    let currenttime = new Date(utcTime + (3600000 * timeOfffset))
    let duration = new Date(donationdata.duration)
    let sendduration = new Date(donationdata.sendduration)
    console.log('time: ' + currenttime.getTime() + ', ' + duration.getTime())

    if (donationdata.status === 'online' && currenttime.getTime() >= duration.getTime()){
        let updates = {}

        if (donationdata.bank >= donationdata.money){
            if (donationdata.materials !== undefined && donationdata.materials.includes('https://')){
                updates['Kickstarter/users/' + link + '/status'] = 'offline'
                //1. –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                //2. –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é (—Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
                //+ —É–∫–∞–∑–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ —á—Ç–æ –º–æ–∂–Ω–æ –µ—Å–ª–∏ —á–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–æ–º

                console.log('stat mailing')
                MaterialsMailing(donationdata, donationdata.materials)

                //3. –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å —Å –±–∞–Ω–∫–∞ —Å–±–æ—Ä–∞ –≤ –±–∞–Ω–∫ –∞–≤—Ç–æ—Ä–∞
                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    updates['Kickstarter/users/' + link + '/bank'] = 0
                    updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/bank'] = result.val().balance.bank + donationdata.bank
                    
                    //4. –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ (history) –∞–≤—Ç–æ—Ä–∞ –∏–Ω—Ñ—É –æ —Ç–æ–º, —á—Ç–æ –µ–º—É –Ω–∞ —Å—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –∑–∞ —Å–±–æ—Ä *–Ω–æ–º–µ—Ä —Å–±–æ—Ä–∞*
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +'. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: +' + donationdata.bank + ' —Ä—É–±.'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }
                    
                    //5. –ü–æ—Å–ª–∞—Ç—å –∞–≤—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–ª —Å–±–æ—Ä –∑–∞–∫—Ä—ã—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–µ–Ω—å–≥–∏
                    let txt_author = 'ü•≥ –°–±–æ—Ä <b>"' + donationdata.name + '"</b> –∑–∞–∫—Ä—ã—Ç!\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–±–æ—Ä–∞, –∞ –Ω–∞ –í–∞—à —Å—á–µ—Ç –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>' + donationdata.bank + ' —Ä—É–±.</b>'
                    
                    fb.database().ref().update(updates).then(() => {
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                    
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
                
            }
            else {
                updates['Kickstarter/users/' + link + '/status'] = 'waiting'

                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–ñ–ò–î–ê–ù–ò–ï (–¥–µ–Ω—å–≥–∏ —Å–æ–±—Ä–∞–Ω—ã)'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }

                    fb.database().ref().update(updates).then(() => {
                        let txt_author = 'üü° –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '"</b> —Å–æ–±—Ä–∞–ª –Ω—É–∂–Ω—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ –∏ –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è.\n<b>–£ –í–∞—Å –µ—Å—Ç—å 3 –¥–Ω—è, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.</b> –ï—Å–ª–∏ –í—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ, —Å–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º'
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
            }
        }
        
        else {
            updates['Kickstarter/users/' + link + '/status'] = 'waiting'

            let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
            authorslists.get().then(result => {
                
                let newaction = {
                    date: currenttime.getTime(),
                    description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–ñ–ò–î–ê–ù–ò–ï (—Å–æ–±—Ä–∞–Ω–∞ –Ω–µ –≤—Å—è —Å—É–º–º–∞)'
                }
                if (result.val().balance.history !== undefined){
                    updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                }
                if (result.val().balance.history === undefined){
                    updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                }

                fb.database().ref().update(updates).then(() => {
                    let txt_author = ''
                    if (donationdata.materials !== undefined && donationdata.materials.includes('https://')){
                        txt_author = 'üü° –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '" –Ω–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É ('+ donationdata.bank + ' –∏–∑ '+ donationdata.money +' —Ä—É–±.)</b>, –Ω–æ, –∏–∑-–∑–∞ –¥–µ–¥–ª–∞–π–Ω–∞, –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è.\n\n–í —Å–ª–µ–¥—É—é—â–∏–µ <b>3 –¥–Ω—è</b> –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä (–¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º), –ª–∏–±–æ –ø—Ä–∏–∑–Ω–∞—Ç—å —Å–±–æ—Ä —Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∞ –í—ã - —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É). –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ, –æ—Ç–∫—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±–æ—Ä–∞ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è, —Å–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
                    }

                    if (donationdata.materials === undefined || !donationdata.materials.includes('https://')){
                        txt_author = 'üü° –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '" –Ω–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É ('+ donationdata.bank + ' –∏–∑ '+ donationdata.money +' —Ä—É–±.)</b>, –Ω–æ, –∏–∑-–∑–∞ –¥–µ–¥–ª–∞–π–Ω–∞, –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è.\n\n–í —Å–ª–µ–¥—É—é—â–∏–µ <b>3 –¥–Ω—è</b> –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä (–¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º), –ª–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∏–∑–Ω–∞—Ç—å —Å–±–æ—Ä —Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∞ –í—ã - —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É). –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ, –æ—Ç–∫—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±–æ—Ä–∞ –≤ —ç—Ç–æ–º –±–æ—Ç–µ (–∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–±–æ—Ä–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è, –ø–æ–∫–∞ –í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã).\n\n–ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è, —Å–±–æ—Ä –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
                    }
                    
                    bot.sendMessage(link.split('/donations/')[0], txt_author, {
                        parse_mode: 'HTML',
                    })
                    .then(res => {
                        if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                        if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                        messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                        message_toedit[link.split('/donations/')[0]][1] = res.message_id
                    })
                })
            })

            /* if (reply.val().privacy === false){
                let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                publicdonationdata.get().then(result => {
                    let donation_updates = {}
                    for (let i = 0; i < result.val().length; i++){
                        if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                            donation_updates['Kickstarter/gallery/donations/' + i] = null
                            fb.database().ref().update(donation_updates)
                        }
                    }
                })
            } */
        }
        
    }
    if (donationdata.status === 'waiting' && currenttime.getTime() >= sendduration.getTime()){
        let updates = {}
        if (donationdata.bank < donationdata.money){
            //–Ω–µ —Å–æ–±—Ä–∞–ª–∏ –±–∞–±–∫–∏ + –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ = –æ—Ç–º–µ–Ω–∞
            if (donationdata.materials === undefined || !donationdata.materials.includes('https://')){
                updates['Kickstarter/users/' + link + '/status'] = 'canceled'
                updates['Kickstarter/users/' + link + '/bank'] = 0

                BankCancelation(donationdata, currenttime.getTime())

                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–¢–ú–ï–ù–ï–ù, —Ç.–∫. –Ω–µ –±—ã–ª–∞ –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª, –∞ —Ç–∞–∫–∂–µ –Ω–µ –±—ã–ª–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å —Å–±–æ—Ä–∞'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }

                    fb.database().ref().update(updates).then(() => {
                        let txt_author = 'üî¥ –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '"</b> –Ω–µ —Å–º–æ–≥ –ø–æ–±–∏—Ç—å —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä–∞–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n–¢–∞–∫–∂–µ –í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª.\n\n<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b>'
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
            }
            //–Ω–µ —Å–æ–±—Ä–∞–ª–∏ –±–∞–±–∫–∏ + –µ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª = –æ—Ç–º–µ–Ω–∞
            if (donationdata.materials !== undefined && donationdata.materials.includes('https://')){
                updates['Kickstarter/users/' + link + '/status'] = 'canceled'
                updates['Kickstarter/users/' + link + '/bank'] = 0

                BankCancelation(donationdata, currenttime.getTime())

                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–¢–ú–ï–ù–ï–ù, —Ç.–∫. –Ω–µ –±—ã–ª–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å —Å–±–æ—Ä–∞'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }

                    fb.database().ref().update(updates).then(() => {
                        let txt_author = 'üî¥ –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '"</b> –Ω–µ —Å–º–æ–≥ –ø–æ–±–∏—Ç—å —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä–∞–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–µ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É (—Å—Å—ã–ª–∫–µ)</b>'
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
            }
        }
        else {
            // —Å–æ–±—Ä–∞–ª–∏ –±–∞–±–∫–∏ - –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ = –æ—Ç–º–µ–Ω–∞
            if (donationdata.materials === undefined || !donationdata.materials.includes('https://')){
                updates['Kickstarter/users/' + link + '/status'] = 'canceled'
                updates['Kickstarter/users/' + link + '/bank'] = 0

                BankCancelation(donationdata, currenttime.getTime())

                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –û–¢–ú–ï–ù–ï–ù, —Ç.–∫. –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }

                    fb.database().ref().update(updates).then(() => {
                        let txt_author = 'üî¥ –í–∞—à —Å–±–æ—Ä <b>"' + donationdata.name + '"</b> –ø–æ–±–∏–ª —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä–∞–º, –Ω–æ –≤—ã —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°–±–æ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b>'
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
            }
            // —Å–æ–±—Ä–∞–ª–∏ –±–∞–±–∫–∏ - –µ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª = –≥–æ—Ç–æ–≤–æ!
            if (donationdata.materials !== undefined && donationdata.materials.includes('https://')){
                updates['Kickstarter/users/' + link + '/status'] = 'offline'
                MaterialsMailing(donationdata, donationdata.materials)

                let authorslists = fb.database().ref('Kickstarter/users/' + link.split('/donations/')[0])
                authorslists.get().then(result => {
                    updates['Kickstarter/users/' + link + '/bank'] = 0
                    updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/bank'] = result.val().balance.bank + donationdata.bank
                    
                    let newaction = {
                        date: currenttime.getTime(),
                        description: '–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–±–æ—Ä–∞ '+link.split('/donations/')[0]+'.'+link.split('/donations/')[1] +'. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: +' + donationdata.bank + ' —Ä—É–±.'
                    }
                    if (result.val().balance.history !== undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/' + result.val().balance.history.length] = newaction
                    }
                    if (result.val().balance.history === undefined){
                        updates['Kickstarter/users/' + link.split('/donations/')[0] + '/balance/history/0'] = newaction
                    }
                    
                    let txt_author = 'ü•≥ –°–±–æ—Ä <b>"' + donationdata.name + '"</b> –∑–∞–∫—Ä—ã—Ç!\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–±–æ—Ä–∞, –∞ –Ω–∞ –í–∞—à —Å—á–µ—Ç –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>' + donationdata.bank + ' —Ä—É–±.</b>'
                    
                    fb.database().ref().update(updates).then(() => {
                        bot.sendMessage(link.split('/donations/')[0], txt_author, {
                            parse_mode: 'HTML',
                        })
                        .then(res => {
                            if (message_toedit[link.split('/donations/')[0]] === undefined) message_toedit[link.split('/donations/')[0]] = []
                            if (messagetext_toedit[link.split('/donations/')[0]] === undefined) messagetext_toedit[link.split('/donations/')[0]] = []
                            messagetext_toedit[link.split('/donations/')[0]][1] = res.text
                            message_toedit[link.split('/donations/')[0]][1] = res.message_id
                        })
                    })
                    
                })

                /* if (reply.val().privacy === false){
                    let publicdonationdata = fb.database().ref('Kickstarter/gallery/donations')
                    publicdonationdata.get().then(result => {
                        let donation_updates = {}
                        for (let i = 0; i < result.val().length; i++){
                            if (result.val()[i].user_id === chat.id && result.val()[i].donation_id === query.data.split('_')[2]){
                                donation_updates['Kickstarter/gallery/donations/' + i] = null
                                fb.database().ref().update(donation_updates)
                            }
                        }
                    })
                } */
            }
        }
    }
}

function MaterialsMailing(donationdata, materials){

    if (donationdata.participants !== undefined){
        let authorslists = fb.database().ref('Kickstarter/payments/info/moderator_id')
        authorslists.get().then(result => {
            let txt = 'ü•≥ –£—Ä–∞! –í—ã –∏ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–±–∏–ª–∏ —Ü–µ–ª—å —Å–±–æ—Ä–∞ <b>' + donationdata.name + '</b>. \n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–±–æ—Ä–∞ –≤ –±–æ—Ç–µ, –ª–∏–±–æ <b>–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>\n\n –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é —Å–±–æ—Ä–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="tg://user?id='+ result.val() +'">–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</a>'
            for (let i = 0; i < donationdata.participants.length; i++){
                bot.sendMessage(donationdata.participants[i].id, txt, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: 'üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                url: materials
                            }]
                        ]
                    }
                })
                .then(res => {
                    if (message_toedit[donationdata.participants[i].id] === undefined) message_toedit[donationdata.participants[i].id] = []
                    if (messagetext_toedit[donationdata.participants[i].id] === undefined) messagetext_toedit[donationdata.participants[i].id] = []
                    messagetext_toedit[donationdata.participants[i].id][1] = res.text
                    message_toedit[donationdata.participants[i].id][1] = res.message_id
                })
                .catch(err => {console.log('here: ' + err)})
    
                if (i === donationdata.participants.length - 1){
                    bot.sendMessage(result.val(), 'üì© –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–±–æ—Ä–∞ ('+ donationdata.duration +') –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <a href="tg://user?id='+ materials +'">–º–∞—Ç–µ—Ä–∏–∞–ª</a> ' + donationdata.participants.length + ' –ª—é–¥—è–º.', {
                        parse_mode: 'HTML',
                    })
                    .then(res => {
                        if (message_toedit[result.val()] === undefined) message_toedit[result.val()] = []
                        if (messagetext_toedit[result.val()] === undefined) messagetext_toedit[result.val()] = []
                        messagetext_toedit[result.val()][1] = res.text
                        message_toedit[result.val()][1] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                }
            }
        })
    }
}

function BankCancelation(donationdata, time){
    if (donationdata.participants !== undefined){
        for (let i = 0; i < donationdata.participants.length; i++){
            let authorslists = fb.database().ref('Kickstarter/users/' + donationdata.participants[i].id)
            authorslists.get().then(result => {
                let updates = {}
                updates['Kickstarter/users/' + donationdata.participants[i].id + '/balance/bank'] = result.val().balance.bank + donationdata.participants[i].amount
                let newaction = {
                    date: time,
                    description: '–°–±–æ—Ä '+ donationdata.name +' –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ (' + donationdata.participants[i].amount + ' —Ä—É–±) –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å.'
                }
                if (result.val().balance.history !== undefined){
                    updates['Kickstarter/users/' + donationdata.participants[i].id + '/balance/history/' + result.val().balance.history.length] = newaction
                }
                if (result.val().balance.history === undefined){
                    updates['Kickstarter/users/' + donationdata.participants[i].id + '/balance/history/0'] = newaction
                }
    
                fb.database().ref().update(updates).then(() => {
                    bot.sendMessage(donationdata.participants[i].id, 'üò¢ –°–±–æ—Ä <b>'+ donationdata.name +'</b> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å', {
                        parse_mode: 'HTML',
                    })
                    .then(res => {
                        if (message_toedit[donationdata.participants[i].id] === undefined) message_toedit[donationdata.participants[i].id] = []
                        if (messagetext_toedit[donationdata.participants[i].id] === undefined) messagetext_toedit[donationdata.participants[i].id] = []
                        messagetext_toedit[donationdata.participants[i].id][1] = res.text
                        message_toedit[donationdata.participants[i].id][1] = res.message_id
                    })
                    .catch(err => {console.log('here: ' + err)})
                })
            })
        }
    }
    
}

function Start(msg){
    const { chat, message_id, text } = msg
    for (let i=0; i<100; i++){
        bot.deleteMessage(chat.id, message_id - i).catch(err => {/* console.log() */})
    }

    if (message_toedit[chat.id] === undefined) {
        message_toedit[chat.id] = []
        messagetext_toedit[chat.id] = []
    }
    if (messagetext_toedit[chat.id] === undefined) {
        messagetext_toedit[chat.id] = []
        messagetext_toedit[chat.id] = []
    }

    let checkuser = fb.database().ref('Kickstarter/users/' + chat.id)
    checkuser.get().then(result => {
        if (result.exists()) {
            console.log('REGISTERED')
            if (text.includes('_part')){
                user_donationlink[chat.id] = text.split('part_')[1]
                user_donationlink[chat.id] = user_donationlink[chat.id].split('_')[0] + '/donations/' + user_donationlink[chat.id].split('_')[1]

                OpenDonationParticipant(chat, null)
            }
            else {
                Auth(chat)
            }
        }
        else {
            if (text.includes('_author')){
                let main_data = fb.database().ref('Kickstarter/')
                main_data.get().then(reply => {
                    if (reply.val().coupons.authors > 0){
                        let updates = {}
                        updates['Kickstarter/coupons/authors'] = reply.val().coupons.authors - 1
                        if (reply.val().mailing.authors === ''){
                            updates['Kickstarter/mailing/authors'] = (chat.id).toString()
                        }
                        if (reply.val().mailing.authors !== ''){
                            updates['Kickstarter/mailing/authors'] = reply.val().mailing.authors + ',' + chat.id
                        }

                        updates['Kickstarter/users/' + chat.id + '/profile/id'] = chat.id
                        updates['Kickstarter/users/' + chat.id + '/profile/name'] = chat.first_name
                        
                        updates['Kickstarter/users/' + chat.id + '/balance/bank'] = 0
                        updates['Kickstarter/users/' + chat.id + '/balance/comission'] = 10
                        updates['Kickstarter/users/' + chat.id + '/balance/overall'] = 0
                        updates['Kickstarter/users/' + chat.id + '/balance/withdrew'] = 0
                        updates['Kickstarter/users/' + chat.id + '/balance/withdroval_limit'] = 3000 //–º–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
                        fb.database().ref().update(updates).then(() => {
                            bot.sendMessage(chat.id, hellomessage, {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: checkchannelfollow[0],
                                            callback_data: backtostart[1]
                                        }]
                                    ]
                                }
                            }).then(res => {
                                message_toedit[chat.id][0] = res.message_id
                                messagetext_toedit[chat.id][0] = res.text
                            })
                        })
                        

                        /* fb.database().ref().update(updates).then(() => {
                            bot.deleteMessage(chat.id, message_toedit[chat.id][0]).catch(err => {console.log('here: ' + err)})
                            bot.sendMessage(chat.id, newdonationsteps[0], {
                                parse_mode: 'HTML',
                            })
                            .then(res => {
                                message_toedit[chat.id][0] = res.message_id
                                messagetext_toedit[chat.id][0] = newdonationsteps[0]
                            })
                        }) */
                        //—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
                        /* donateregisterstep[chat.id] = 1
                        donate_name[chat.id] = ''
                        donate_money[chat.id] = 0
                        donate_minmoney[chat.id] = 0
                        donate_duration[chat.id] = 0
                        donate_sendduration[chat.id] = 3 //—Ç—Ä–∏ –¥–Ω—è –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ
                        donate_private[chat.id] = false
                        donate_photo[chat.id] = ''
                        donate_duration_secs[chat.id] = 0
                        donate_sendduration_secs[chat.id] = 0
                        donate_materials[chat.id] = '' */
                    }
                })
                
            }
            if (text.includes('_part')){
                console.log('USER DIDNT REGISTER YET')
                user_donationlink[chat.id] = text.split('part_')[1]
                user_donationlink[chat.id] = user_donationlink[chat.id].split('_')[0] + '/donations/' + user_donationlink[chat.id].split('_')[1]
                
                let newuser = {
                    profile: {
                        name: chat.first_name,
                        id: chat.id,
                    },
                    balance: {
                        bank: 0,
                        comission: 25,
                        overall: 0,
                        withdrew: 0,
                        withdroval_limit: 1500
                    }
                }
                let updates = {}
                updates['Kickstarter/users/' + chat.id] = newuser
                fb.database().ref().update(updates)
                
                bot.sendMessage(chat.id, hellomessage, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: checkchannelfollow[0],
                                callback_data: checkchannelfollow[1] + '_0'
                            }]
                        ]
                    }
                }).then(res => {
                    message_toedit[chat.id][0] = res.message_id
                    messagetext_toedit[chat.id][0] = res.text
                })
            }
            if (!text.includes('_part') && !text.includes('_author')) {

                let newuser = {
                    profile: {
                        name: chat.first_name,
                        id: chat.id,
                    },
                    balance: {
                        bank: 0,
                        comission: 25,
                        overall: 0,
                        withdrew: 0,
                        withdroval_limit: 1500
                    }
                }
                let updates = {}
                updates['Kickstarter/users/' + chat.id] = newuser
                fb.database().ref().update(updates)

                bot.sendMessage(chat.id, hellomessage, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: checkchannelfollow[0],
                                callback_data: checkchannelfollow[1] + '_0'
                            }]
                        ]
                    }
                }).then(res => {
                    message_toedit[chat.id][0] = res.message_id
                    messagetext_toedit[chat.id][0] = res.text
                })
            }
        }
    }).catch(err => {})
}

//–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é ("–ì–ª–∞–≤–Ω–∞—è")
bot.onText(/\/start/, msg => {
    //const { chat, message_id, text } = msg
    Start(msg)
})

async function getProvider(method, account){
    switch(method){
        case 'qiwi': {
            return Recipients.QIWI
        }
        case 'yoomoney': {
            return Recipients.YooMoney
        }
        case 'card': {
            console.log(detector.getCardProvider(account))
            return detector.getCardProvider(account)
        }
        case 'mobile': {
            console.log(detector.getPhoneProvider(account))
            return detector.getPhoneProvider(account)
        }
    }
}

async function sendPayment(method, account, amount, comment) {
    const provider = await getProvider(method, account);
    const commission = await qiwi.getCommission(provider, account, amount);
    console.log('here: ' + provider)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `pay2` –≤–º–µ—Å—Ç–æ `pay` –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    await qiwi.pay2({
      // –ü—É—Å–∫–∞–π –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å
      amount: amount - commission,
      account,
  
      // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–∞–∫-–∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ö–ò–í–ò
      provider,
    
      // –£–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É (—Ö–æ—Ç—è –º–æ–∂–Ω–æ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å)
      currency: Currency.RUB,
    }).then(res => {
        console.log(res)
    })
}

//–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ü–∏–∫–ª "—Å—Ç–∞—Ä—Ç-–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç" –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. 
async function Auth(chat){
    
    //sendPayment("mobile", "77075112224", 20);
    //qiwi.getPersonProfile().then(console.log);
    /* sendPayment('yoomoney','4100117037853859', 30, 'lol').then(res => {
        console.log('works')
        console.log(res)
    }).catch(err => {console.log(err)}) */
    let creatordata = fb.database().ref('Kickstarter/users/' + chat.id)
    creatordata.get().then(result => {
        let txt = '–ü—Ä–∏–≤–µ—Ç, <b>' + chat.first_name + '</b>\n'

        if (result.val().donations !== null && result.val().donations !== undefined){
            donationnames[chat.id] = Object.keys(result.val().donations)
            console.log(result.val().donations)
        }
        
        if (result.val().participants !== null && result.val().participants !== undefined){
            if (result.val().participants.includes(','))participantsnames[chat.id] = result.val().participants.split(',')
            if (!result.val().participants.includes(',')){
                if (result.val().participants === ''){
                    participantsnames[chat.id] = undefined
                }
                if (result.val().participants !== ''){
                    participantsnames[chat.id] = result.val().participants.split(',')
                }
            }
        }

        let kb = []

        /* if (reply.exists() && reply.val().length > 0){
            kb.push([{
                text: publicdonationlist[0],
                callback_data: publicdonationlist[1]
            }])
        } */

        let donationbutton = []
        donationbutton.push({
            text: '‚ûï –ù–æ–≤—ã–π —Å–±–æ—Ä',
            callback_data: whoareyoubutton[1]
        })
        if (donationnames[chat.id] !== undefined && donationnames[chat.id].length > 0){ 
            txt += '–í—ã –æ—Ç–∫—Ä—ã–ª–∏: <b>' + donationnames[chat.id].length + ' —Å–±–æ—Ä–æ–≤</b>'
            donationbutton.push(
            {
                text: mydonationslist[0],
                callback_data: mydonationslist[1]
            })
        }
        kb.push(donationbutton)
        if (participantsnames[chat.id] !== undefined && participantsnames[chat.id].length > 0){ 
            txt += '\n–í—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏/—É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤: <b>' + participantsnames[chat.id].length + ' —Å–±–æ—Ä–∞—Ö</b>'
            kb.push([{
                text: myparticipantslist[0],
                callback_data: myparticipantslist[1]
            }])
        }

        if (participantsnames[chat.id] === undefined || participantsnames[chat.id].length === 0){ 
            if (donationnames[chat.id] === undefined || donationnames[chat.id].length === 0)
            txt += '\n–í—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏/—É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤: 0<b> —Å–±–æ—Ä–∞—Ö</b>'
        }

        txt += '\n\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n'

        kb.push([{
            text: mybalancebutton[0],
            callback_data: mybalancebutton[1]
        }])

        bot.sendMessage(chat.id, txt, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: kb
            }
        })
        .then(res => {
            if (message_toedit[chat.id] === undefined) {
                message_toedit[chat.id] = []
            }
            message_toedit[chat.id][0] = res.message_id
        })
    })

}

//–í—Å–µ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –∞–¥–º–∏–Ω—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
/* process.on('uncaughtException', function (err) {
    console.log(err)
    let userdata = fb.database().ref('Motherbase/logger/uncaughtException/')
    userdata.get().then((result) => {
        let counter = Object.keys(result.val())

        let date = new Date()
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 6 //Astana GMT +6
        let time_now = new Date(utcTime + (3600000 * timeOfffset))

        let newreport = {
            when: time_now,
            error_text: err.message.toString(),
            error_stack: err.stack.toString()
        }

        let updates = {}
        updates['Motherbase/logger/uncaughtException/' + counter.length] = newreport
        fb.database().ref().update(updates)
        let mb_data = fb.database().ref('Motherbase/chats/')
        mb_data.get().then((result) => {
            let err_txt = `<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è</b>
–í —Ä–∞–±–æ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ DELIVERY –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

<b>‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </b>
‚îú –ó–∞–≤–µ–¥–µ–Ω–∏–µ: `+ userPoint[current_chat] + `
‚îî –í—Ä–µ–º—è: ` + time_now + `

<b>üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </b>
` + err.name.toString() + `

` + err.stack.toString() + `

` + err.message.toString()
            bot.sendMessage(result.val().god_id, err_txt, {
                parse_mode: 'HTML'
            })
        })
    
    })
    
}) */

process.on('uncaughtException', function (err) {
    console.log(err);
});
