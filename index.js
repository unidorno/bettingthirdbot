const TelegramBot = require('node-telegram-bot-api')
const config = require('./config')

//====================INITIALIZE FIREBASE==============================
const firebase_connect = require('firebase')
const { reset } = require('nodemon')
const { chat } = require('googleapis/build/src/apis/chat')

const fb = firebase_connect.initializeApp({
    apiKey:'AIzaSyA0wSxSsB938N4mKpV5Nec0tBWbpPFyZAQ',
    authDomain:'upperrestaurant.firebaseapp.com',
    databaseURL: 'https://upperrestaurant-default-rtdb.europe-west1.firebasedatabase.app'
})
//====================================================================

//–ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(config.TOKEN,
{
    polling:
    {
        interval: 300,
        autoStart: true,
        params: 
        {
            timeout: 10
        }
    }
})

const emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

let job_post_price = 0 
let channel_link = ''
let bot_link = ''
let group_id = 0
let channel_id = 0
let customer_support = ''
let active_session = []
let postpone_delay = 1
let postpone_enabled = false
let timer = setTimeout(() => PostPonePosting(), 1000 * 60 * postpone_delay);
let last_post = 0;

let message_nobutton = []
let message_todelete = []
let jobediting = []

let jobbody = []

const newjob = ['‚ûï –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è', 'newjobcb']
const joblist = ['üßæ –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏', 'myjobscb']
const editjob = ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', 'editjobcb']
const previewjob = ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è', 'previewjob_cb']
const gotostart = ['üè† –ì–ª–∞–≤–Ω–∞—è', 'gotostart']
const acceptpost = ['‚úÖ –°–µ–π—á–∞—Å', 'acceptpublishcb']
const acceptpostpone = ['‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π', 'postponeblishcb']

let settingsrequest = fb.database().ref('hrbot/settings')
settingsrequest.on('value', (result) => {
    console.log(result.val())
    job_post_price = result.val().price_info.job_post_price
    channel_link = result.val().basic_info.channel_link
    bot_link = result.val().basic_info.bot_link
    group_id = result.val().basic_info.group_id
    channel_id = result.val().basic_info.channel_id
    customer_support = result.val().basic_info.customer_support
})
let postponerequest = fb.database().ref('hrbot/settings/postpone_info')
postponerequest.on('value', (result) => {
    clearTimeout(timer);
    postpone_delay = result.val().postpone_delay
    postpone_enabled = result.val().postpone_enabled
    timer = setTimeout(() => PostPonePosting(), 1000 * 60 * postpone_delay);
})
bot.on('channel_post', msg => {
    console.log(msg)
    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 3
    last_post = new Date(utcTime + (3600000 * timeOfffset))
})
bot.on('message', (msg) =>
{
    const { chat, message_id, text } = msg
    FixMessages(chat)

    if (active_session[chat.id] !== undefined){
        if (jobediting[chat.id] !== undefined) {
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('err: ' + err)})
    
            if (jobediting[chat.id] === 0 && text < 25) jobbody[chat.id].job_type = text
            if (jobediting[chat.id] === 1 && text < 35) jobbody[chat.id].company_name = text
            if (jobediting[chat.id] === 2 && text < 250) jobbody[chat.id].company_description = text
            if (jobediting[chat.id] === 3 && text < 15) jobbody[chat.id].city = text
            if (jobediting[chat.id] === 4 && text < 500) jobbody[chat.id].requirements = text
            if (jobediting[chat.id] === 5 && text < 250) jobbody[chat.id].tasks = text
            if (jobediting[chat.id] === 6 && text < 300) jobbody[chat.id].conditions = text
            if (jobediting[chat.id] === 7 && emailRegexp.test(text)) jobbody[chat.id].email = text

            let updates = {}
            updates['hrbot/users/' + chat.id + '/jobs/' + jobbody[chat.id].job_number] = jobbody[chat.id]
            fb.database().ref().update(updates)
    
            EditJob(chat)
            jobediting[chat.id] = undefined
        }
    }
    else {
        for (let i = 0; i < 50; i++){
            bot.deleteMessage(chat.id, message_id - i).catch(err => {console.log('err: ' + err)})
        }
        if (!text.includes('/start')) Start(msg)
        
    }
})
bot.on('callback_query', query => {
    const { chat, message_id, text } = query.message
    FixMessages(chat)

    let sessionchecker = 0
    if (query.message.chat.type === 'private') sessionchecker = chat.id
    if (query.message.chat.type !== 'private') sessionchecker = query.from.id
    console.log(sessionchecker)

    if (active_session[sessionchecker] !== undefined){
        if (query.data === newjob[1] || query.data.includes(editjob[1])){
            if (query.data === newjob[1]){
                let creatordata = fb.database().ref('hrbot/users/' + chat.id)
                creatordata.get().then(result => {
                    let jobamount = 0
                    if (result.val().jobs !== undefined) {
                        jobamount = result.val().jobs.length
                    }
                    jobbody[chat.id] = {
                        job_type: '',
                        company_name: '',
                        company_description: '',
                        city: '',
                        requirements: '',
                        tasks: '',
                        conditions: '',
                        email: ' ',
                        sender: chat.id,
                        job_number: jobamount,
                        time_created: 0,
                        time_paid: 0,
                        time_approved: 0,
                        time_published: 0,
                        status: 'preparing', //preparing -> paid -> approved -> published
                        message_id: 0,
                        publish_id: 0,
                        date: 0,
                        readable_date: ''
                    }
                    EditJob(chat)
                })
            }
            if (query.data.includes(editjob[1])){
                if (query.data.includes('_')){
                    let creatordata = fb.database().ref('hrbot/users/' + chat.id + '/jobs/' + query.data.split('_')[1])
                    creatordata.get().then(result => {
                        console.log(result.val())
                        jobbody[chat.id] = {
                            job_type: result.val().job_type,
                            company_name: result.val().company_name,
                            company_description: result.val().company_description,
                            city: result.val().city,
                            requirements: result.val().requirements,
                            tasks: result.val().tasks,
                            conditions: result.val().conditions,
                            email: result.val().email,
                            sender: chat.id,
                            job_number: result.val().job_number,
                            time_created: result.val().time_created,
                            time_paid: result.val().time_paid,
                            time_approved: result.val().time_approved,
                            time_published: result.val().time_published,
                            status: result.val().status,            //preparing -> paid -> approved -> published
                            message_id: result.val().message_id,
                            publish_id: result.val().publish_id,
                            readable_date: result.val().readable_date,
                            date: result.val().date
                        }
                        if (jobbody[chat.id].status === 'paid' || jobbody[chat.id].status === 'published') PreviewJob(chat)
                        if (jobbody[chat.id].status !== 'paid' && jobbody[chat.id].status !== 'published') EditJob(chat)
                    })
                }
                else {
                    if (jobbody[chat.id].status === 'paid' || jobbody[chat.id].status === 'published') PreviewJob(chat)
                    if (jobbody[chat.id].status !== 'paid' && jobbody[chat.id].status !== 'published') EditJob(chat)
                }
            }
            
        }
        if (query.data.includes('editjoparam')){
            jobediting[chat.id] = parseInt(query.data.split('_')[1])

            let kb = []
            kb.push([{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: editjob[1]
            }])
    
            let txt = ''
            if (jobediting[chat.id] === 0) txt = '–ö–æ–≥–æ –í—ã –∏—â–µ—Ç–µ? –£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å:'
            if (jobediting[chat.id] === 1) txt = '–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?'
            if (jobediting[chat.id] === 2) txt = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:'
            if (jobediting[chat.id] === 3) txt = '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –∏—â–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤? –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã'
            if (jobediting[chat.id] === 4) txt = '–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:'
            if (jobediting[chat.id] === 5) txt = '–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç?'
            if (jobediting[chat.id] === 6) txt = '–ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?'
            if (jobediting[chat.id] === 7) txt = '–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è —Å–≤—è–∑–∏. –ï—Å–ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç'
            if (jobediting[chat.id] === 8) {
                txt = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã, –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è'
                
                let creatordata = fb.database().ref('hrbot/postpone/')
                creatordata.get().then(result => {

                    let date = new Date(query.message.date * 1000)
                    console.log(date)
                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                    let timeOfffset = 3
                    let current_date = new Date(utcTime + (3600000 * timeOfffset))
                    
                    let current_data = current_date.getUTCDate()
                    let current_month = current_date.getUTCMonth() + 1
                    if (current_month < 10) current_month = '0' + current_month
                    let readable_current_date = current_data + '.' + current_month

                    let lastday_date = new Date(current_date.getFullYear(), current_date.getMonth() + 1, 0)
                    let lastday_data = lastday_date.getUTCDate()
                    let lastday_month = lastday_date.getUTCMonth() + 1
                    if (lastday_month < 10) lastday_month = '0' + lastday_month
                    let readable_last_date = lastday_data + '.' + lastday_month

                    console.log('current date: ' + readable_current_date)
                    console.log('last date: ' + readable_last_date)

                    let row = 1
                    //lastday_data: 28, current_data: 21 | i = 0; i < 7; i++
                    for (let i = 0; i <= (lastday_data - current_data); i++){
                        console.log(row)
                        if (kb[row] !== undefined){

                        }
                        if (kb[row] === undefined){
                            kb[row] = []
                            for (let b = 0; b < 3 && i + b <= (lastday_data - current_data); b++){
                                console.log("adding: " + 'sdt_' + (current_data + i + b) + '_' + current_month)
                                let txt = '', cb
                                if (result.val() !== null){
                                    for (let x = 0; x < result.val().length; x++){
                                        if (result.val()[x].date_text === (current_data + i + b) + '.' + current_month) {
                                            txt = '‚ùå' (current_data + i + b) + '.' + current_month
                                            cb = 'null'
                                        }
                                    }
                                }
                                if (txt === ''){
                                    txt = (current_data + i + b) + '.' + current_month
                                    cb = 'sdt_' + (current_date.getTime() + ((i+b) * 86400000)) + '_' + (current_data + i + b) + '_' + current_month
                                    console.log('availiable date: ' + (current_date.getTime() + ((i+b) * 86400000)))
                                }
                                kb[row].push({
                                    text: txt,
                                    callback_data: cb 
                                })
                            }
                            i+=2
                            row++
                        }
                    }

                    bot.sendMessage(chat.id, txt, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    }).then(res => {
                        if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                        message_todelete[chat.id].push(res.message_id)
                    })
                })
            }
            
            if (jobediting[chat.id] !== 8){
                bot.sendMessage(chat.id, txt, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: kb
                    }
                }).then(res => {
                    if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                    message_todelete[chat.id].push(res.message_id)
                })
            }
            
        }
        if (query.data === gotostart[1]){
            jobbody[chat.id] = undefined
            jobediting[chat.id] = undefined
            Start(query.message)
        }
        if (query.data === previewjob[1]) PreviewJob(chat)
        if (query.data.includes('pay_')){
            if (query.data.split('_')[1] === 'jobpost'){
                console.log(bot_link)
                bot.sendInvoice(chat.id, '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ: ' + channel_link, 
                'PAYLOAD_' + chat.id + '_' + jobbody[chat.id].job_number, config.LIQPAY_TEST, 'RANDOM_KEY', 'RUB',
                    [{
                        label: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏',
                        amount: job_post_price * 100
                    }],
                    {
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û–ø–ª–∞—Ç–∏—Ç—å (' + job_post_price + ' —Ä—É–±.)',
                                    pay: true
                                }],
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: previewjob[1],
                                }]
                            ]
                        }
                    }
                ).then(res => {
                    if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                    message_todelete[chat.id].push(res.message_id)
                })
            }
        }
        if (query.data === joblist[1]){
            let creatordata = fb.database().ref('hrbot/users/' + chat.id)
            creatordata.get().then(result => {
                if (result.val().jobs !== undefined){
                    let txt = '–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã:\n\n'
                    let kb = []
                    kb.push([{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: gotostart[1]
                    }])
                    let lastjobnum = 0
                    if (result.val().jobs.length >= 10) lastjobnum = result.val().jobs.length - 10

                    for (let i = result.val().jobs.length - 1; i > lastjobnum; i--){
                        let temptxt = ''
                        if (result.val().jobs[i].status === 'preparing') temptxt += '- –®–ê–ë–õ–û–ù | '
                        if (result.val().jobs[i].status === 'paid') temptxt += '- –û–ü–õ–ê–ß–ï–ù–û | '
                        if (result.val().jobs[i].status === 'approved') temptxt += '- –û–ñ–ò–î–ê–ù–ò–ï | '
                        if (result.val().jobs[i].status === 'published') temptxt += '- –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û | '
                        let tempjobtype = result.val().jobs[i].job_type
                        let tempcompanyname = result.val().jobs[i].company_name
                        if (result.val().jobs[i].job_type.length > 10) tempjobtype = result.val().jobs[i].job_type.substring(0, 10) + '.'
                        if (result.val().jobs[i].company_name.length > 10) tempcompanyname = result.val().jobs[i].company_name.substring(0, 10) + '...'
                        temptxt += tempjobtype + ' –≤ ' + tempcompanyname + '\n'
                        txt += temptxt
                        kb.push([{
                            text: temptxt,
                            callback_data: editjob[1] + '_' + result.val().jobs[i].job_number
                        }])
                    }
                    bot.sendMessage(chat.id, txt, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    }).then(res => {
                        if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                        message_todelete[chat.id].push(res.message_id)
                    })
                }
                if (result.val().jobs === undefined){
                    bot.sendMessage(chat.id, '–í—ã –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ', {
                        disable_web_page_preview: true,
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: gotostart[1]
                                },
                                {
                                    text: newjob[0],
                                    callback_data: newjob[1]
                                }]
                            ]
                        }
                    }).then(res => {
                        if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                        message_todelete[chat.id].push(res.message_id)
                    })
                }
            })
        }
        if (query.data.includes(acceptpost[1])){
            //DONE 1. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
            //2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            //3. –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            //4. –ü–æ–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            //5. –ö–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é, –∫–∏–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
    
            let id = query.data.split('_')[1]
            let local_jobnum = query.data.split('_')[2]
            let updates = {}
    
            let creatordata = fb.database().ref('hrbot/users/' + id + '/jobs/' + local_jobnum)
            creatordata.get().then(result => {
    
                let txt = 'üöÄ –ò—â–µ–º <b>' + result.val().job_type + '</b> –≤ <b>' + result.val().company_name + '</b>'
                txt += '\n\n<b>–ì–æ—Ä–æ–¥:</b> ' + result.val().city
                txt += '\n\n<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n' + result.val().company_description
                txt += '\n\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: </b>\n' + result.val().requirements
                txt += '\n\n<b>–ó–∞–¥–∞—á–∏: </b>\n' + result.val().tasks
                txt += '\n\n<b>–£—Å–ª–æ–≤–∏—è: </b>\n' + result.val().conditions
                if (result.val().email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ—á—Ç—É: ' + result.val().email
                if (!result.val().email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ <a href="tg://user?id='+ result.val().sender +'">—Å—é–¥–∞</a>'
    
                bot.sendMessage(channel_id, txt, {
                    parse_mode: 'HTML'
                })
                .then(res => {
                    console.log(res)
                    updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/publish_id'] = res.message_id
                    updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/status'] = 'published'
                    updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/time_published'] = res.date * 1000
                    
                    let clienttext = '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è <b><a href="'+ channel_link +'/'+ res.message_id +'">' + result.val().job_type + ' –≤ '+ result.val().company_name +'"</a></b> –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.'
                    bot.sendMessage(id, clienttext, {
                        disable_web_page_preview: true,
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–•–æ—Ä–æ—à–æ üëçüèª',
                                    callback_data: gotostart[1]
                                }]
                            ]
                        }
                    }).then(res2 => {
                        if (message_todelete[id] === undefined) message_todelete[id] = []
                        message_todelete[id].push(res2.message_id)
                    })
    
                    let admingroup_text = '–í—ã —É—Å–ø–µ—à–Ω–æ <a href="'+ channel_link +'/'+ res.message_id +'">–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏</a> –ø–æ—Å—Ç <a href="tg://user?id='+id+'">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
                    bot.editMessageText(admingroup_text, {
                        chat_id: group_id,
                        message_id: result.val().message_id, 
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                                    url: 'tg://user?id='+id
                                }],
                                [{
                                    text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç',
                                    url: channel_link +'/'+ res.message_id
                                }]
                            ]
                        }
                    })
        
                    fb.database().ref().update(updates)
                })
            })
        }
        if (query.data.includes(acceptpostpone[1])){
    
            let id = query.data.split('_')[1]
            let local_jobnum = query.data.split('_')[2]
            let readable_date = query.data.split('_')[3]
            let updates = {}
            console.log(readable_date)
    
            let creatordata = fb.database().ref('hrbot/postpone/')
            creatordata.get().then(result => {
                
                if (result.val() === null) {
                    updates['hrbot/postpone/0/list/0'] = id + '_' + local_jobnum
                    updates['hrbot/postpone/0/date'] = readable_date
                }
                if (result.val() !== null) {
                    for (let i = 0; i < result.val().length; i++){
                        if (result.val()[i].date === readable_date){
                            let listinfo = fb.database().ref('hrbot/postpone/' + i)
                            listinfo.get().then(reply => {
                                updates['hrbot/postpone/' + i + '/list/' + reply.val().list.length] = id + '_' + local_jobnum
                            })
                            console.log('added to existing list')
                            break;
                        }
                        if (i === result.val().length - 1 && result.val()[i].date !== readable_date){
                            console.log('added to NEW list')
                            updates['hrbot/postpone/' + result.val().length + '/list/0'] = id + '_' + local_jobnum
                            updates['hrbot/postpone/' + result.val().length + '/date'] = readable_date
                        }
                    }
                }

                /* updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/status'] = 'published'
                updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/time_published'] = res.date * 1000 */
                
                let jobdata = fb.database().ref('hrbot/users/' + id + '/jobs/' + local_jobnum)
                jobdata.get().then(reply => {
            

                    let clienttext = '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è <b>"' + reply.val().job_type + ' –≤ '+ reply.val().company_name +'"</b> –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.'
                    bot.sendMessage(id, clienttext, {
                        disable_web_page_preview: true,
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–•–æ—Ä–æ—à–æ üëçüèª',
                                    callback_data: gotostart[1]
                                }]
                            ]
                        }
                    }).then(res2 => {
                        if (message_todelete[id] === undefined) message_todelete[id] = []
                        message_todelete[id].push(res2.message_id)
                    })
    
                    let admingroup_text = '–ü–æ—Å—Ç <a href="tg://user?id='+id+'">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ ' + readable_date
                    bot.deleteMessage(group_id, reply.val().message_id).catch(err => {console.log('err: ' + err)})
                    bot.sendMessage(group_id, admingroup_text, {
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                                    url: 'tg://user?id='+ id
                                }]
                            ]
                        }
                    })
                    .then(res => {
                        updates['hrbot/users/' + id  + '/jobs/' + local_jobnum + '/message_id'] = res.message_id
                        fb.database().ref().update(updates)
                    })
                })
                
            })
    
            
        }
        if (jobediting[chat.id] === 8 && query.data.includes('sdt_')){
            jobbody[chat.id].date = parseInt(query.data.split('_')[1])
            jobbody[chat.id].readable_date = query.data.split('_')[2] + '.' + query.data.split('_')[3]

            EditJob(chat)
            jobediting[chat.id] = undefined
        }
    }
    else {
        bot.deleteMessage(chat.id, message_id).catch(err => {console.log('err: ' + err)})
        for (let i = 0; i < 50; i++){
            bot.deleteMessage(chat.id, message_id - i).catch(err => {console.log('err: ' + err)})
        }
        active_session[chat.id] = true
        Start(query.message)
    }
})
bot.on('pre_checkout_query', query => {
    bot.answerPreCheckoutQuery(query.id, true)
})
bot.on('successful_payment', query => {
    console.log('success: ' + query.successful_payment.invoice_payload)
    let id = (query.successful_payment.invoice_payload).split('_')[1]
    let job_number = (query.successful_payment.invoice_payload).split('_')[2]
    let updates = {}
    updates['hrbot/users/' + id + '/jobs/' + job_number + '/status/'] = 'paid'
    updates['hrbot/users/' + id + '/jobs/' + job_number + '/time_paid/'] = query.date * 1000

    let creatordata = fb.database().ref('hrbot/users/' + id)
    creatordata.get().then(result => {
        
        let txt = 'üöÄ –ò—â–µ–º <b>' + result.val().jobs[job_number].job_type + '</b> –≤ <b>' + result.val().jobs[job_number].company_name + '</b>'
        txt += '\n\n<b>–ì–æ—Ä–æ–¥:</b> ' + result.val().jobs[job_number].city
        txt += '\n\n<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n' + result.val().jobs[job_number].company_description
        txt += '\n\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: </b>\n' + result.val().jobs[job_number].requirements
        txt += '\n\n<b>–ó–∞–¥–∞—á–∏: </b>\n' + result.val().jobs[job_number].tasks
        txt += '\n\n<b>–£—Å–ª–æ–≤–∏—è: </b>\n' + result.val().jobs[job_number].conditions
        if (result.val().jobs[job_number].email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ—á—Ç—É: ' + result.val().jobs[job_number].email
        if (!result.val().jobs[job_number].email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ <a href="tg://user?id='+ result.val().jobs[job_number].sender +'">—Å—é–¥–∞</a>'
        
        let date = new Date(result.val().jobs[job_number].time_created)
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 3
        let finaldate = new Date(utcTime + (3600000 * timeOfffset))

        let minutes = finaldate.getUTCMinutes()
        if (minutes < 10) minutes = '0' + minutes
        let hours = finaldate.getUTCHours()
        if (hours < 10) hours = '0' + hours
        let data = finaldate.getUTCDate()
        let month = finaldate.getUTCMonth() + 1
        if (month < 10) month = '0' + month
        let readable_date = data + '.' + month + ', ' + hours + ':' + minutes

        let admin_text = 'üíµ –û–ø–ª–∞—á–µ–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç <b><a href="tg://user?id='+id+'">'+query.chat.first_name+'</a></b>'
        admin_text += '\n‚îú <b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> ' + readable_date

        date = new Date(query.date * 1000)
        utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        timeOfffset = 3
        finaldate = new Date(utcTime + (3600000 * timeOfffset))

        minutes = finaldate.getUTCMinutes()
        if (minutes < 10) minutes = '0' + minutes
        hours = finaldate.getUTCHours()
        if (hours < 10) hours = '0' + hours
        data = finaldate.getUTCDate()
        month = finaldate.getUTCMonth() + 1
        if (month < 10) month = '0' + month
        readable_date = data + '.' + month + ', ' + hours + ':' + minutes

        admin_text += '\n‚îú <b>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:</b> ' + readable_date
        admin_text += '\n‚îú <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ‚úÖ'

        let kb = []
        kb.push([{
            text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
            url: 'tg://user?id='+ id
        }])
        
        if (result.val().jobs[job_number].readable_date.includes('.')) {
            admin_text += '\n‚îî <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ' + result.val().jobs[job_number].readable_date
            kb.push([{
                text: acceptpost[0],
                callback_data: acceptpost[1] + '_' + id + '_' + job_number
            },
            {
                text: acceptpostpone[0],
                callback_data: acceptpostpone[1] + '_' + id + '_' + job_number + '_' + result.val().jobs[job_number].readable_date
            }])
        }
        if (!result.val().jobs[job_number].readable_date.includes('.')) {
            admin_text += '\n‚îî <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ' + result.val().jobs[job_number].readable_date
            kb.push([{
                text: acceptpost[0],
                callback_data: acceptpost[1] + '_' + id + '_' + job_number
            }])
        }
        admin_text += '\n\n<b>–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n\n'
        admin_text += txt
        

        bot.deleteMessage(group_id, result.val().jobs[job_number].message_id).catch(err => {console.log('err: ' + err)})
        bot.sendMessage(group_id, admin_text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: kb
            }
        }).then(res => {
            updates['hrbot/users/' + id + '/jobs/' + job_number + '/message_id/'] = res.message_id
            fb.database().ref().update(updates)
        })

        bot.sendMessage(id, 'üíµ –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞, –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —Å–æ–æ–±—â–∏–º –í–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="https://t.me/'+ customer_support +'">–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π</a>', {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: gotostart[1]
                    }]
                ]
            }
        }).then(res => {
            if (message_todelete[query.chat.id] === undefined) message_todelete[query.chat.id] = []
            message_todelete[query.chat.id].push(res.message_id)
        })
        
    })
})
bot.onText(/\/Admin_controller:GetChatInfo/, msg =>
    {
        //console.log(msg)
        const chatId = msg.chat.id
        bot.sendMessage(chatId, chatId)
    
})
//–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é ("–ì–ª–∞–≤–Ω–∞—è")
bot.onText(/\/start/, msg => {
    active_session[msg.chat.id] = true
    Start(msg)
})
function Start(msg){
    const { chat, message_id, text } = msg
    
    let creatordata = fb.database().ref('hrbot/users/' + chat.id)
    creatordata.get().then(result => {
        console.log(result.exists())
        if (result.exists()) {
            let txt = '–ü—Ä–∏–≤–µ—Ç, ' + chat.first_name + '. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'

            let kb = []
            kb[0] = []
            kb[0].push({
                text: newjob[0],
                callback_data: newjob[1]
            })
            if (result.val().jobs !== undefined){
                kb[0].push({
                    text: joblist[0],
                    callback_data: joblist[1]
                })
            }
            bot.sendMessage(chat.id, txt, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: kb
                }
            }).then(res => {
                if (message_nobutton[chat.id] === undefined) message_nobutton[chat.id] = []
                message_nobutton[chat.id].push([res.message_id, txt, true])
            })
        }
        else {
            let updates = {}
            updates['hrbot/users/' + chat.id + '/info/'] = chat.first_name
            fb.database().ref().update(updates)

            let txt = '–ü—Ä–∏–≤–µ—Ç. –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ –∫–∞–Ω–∞–ª–µ <b><a href="https://t.me/jobs_designglory">Design Jobs</a></b>'
            txt += '\n\n–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ <b>' + job_post_price + ' —Ä—É–±.</b> '
            txt += '–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'

            bot.sendMessage(chat.id, txt, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: newjob[0],
                            callback_data: newjob[1]
                        }]
                    ]
                }
            })
            .then(res => {
                if (message_nobutton[chat.id] === undefined) message_nobutton[chat.id] = []
                message_nobutton[chat.id].push([res.message_id, txt])
            })
        }
    })
}
function FixMessages(chat){

    if (message_todelete[chat.id] !== undefined){
        for (let i = 0; i < message_todelete[chat.id].length; i++){
            bot.deleteMessage(chat.id, message_todelete[chat.id][i]).catch(err => {/* console.log('err: ' + err) */})
        }
    }

    if (message_nobutton[chat.id] !== undefined){
        for (let i = 0; i < message_nobutton[chat.id].length; i++){
            bot.editMessageText(message_nobutton[chat.id][i][1], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_nobutton[chat.id][i][0],
                disable_web_page_preview: true
            }).catch(err => {/* console.log('err: ' + err) */})
            if (message_nobutton[chat.id][i][2] === true){
                if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
                message_todelete[chat.id].push(message_nobutton[chat.id][i][0])
            }
        }
    }
}
function EditJob(chat){

    console.log('editing job')
    let pointready = []
    for (let i = 0; i < 9; i++) pointready[i] = ''

    let txt = '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –ø–æ–ª—è –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n\n'
    if (jobbody[chat.id].job_type !== '') pointready[0] = '‚úÖ '
    txt += '<b>–ö–æ–≥–æ –∏—â–µ–º?</b> \n' + jobbody[chat.id].job_type + '\n'

    if (jobbody[chat.id].company_name !== '') {
        txt += '\n' 
        pointready[1] = '‚úÖ '
    }
    txt += '<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: </b>\n' + jobbody[chat.id].company_name + '\n'

    if (jobbody[chat.id].company_description !== '') {
        txt += '\n'
        pointready[2] = '‚úÖ '
    }
    txt += '<b>–û –∫–æ–º–ø–∞–Ω–∏–∏: </b>\n' + jobbody[chat.id].company_description + '\n'

    if (jobbody[chat.id].city !== '') {
        txt += '\n' 
        pointready[3] = '‚úÖ '
    }
    txt += '<b>–ì–æ—Ä–æ–¥: </b>\n' + jobbody[chat.id].city + '\n'

    if (jobbody[chat.id].requirements !== '') {
        txt += '\n'
        pointready[4] = '‚úÖ '
    }
    txt += '<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: </b>\n' + jobbody[chat.id].requirements + '\n'

    if (jobbody[chat.id].tasks !== '') {
        txt += '\n'
        pointready[5] = '‚úÖ '
    }
    txt += '<b>–ó–∞–¥–∞—á–∏: </b>\n' + jobbody[chat.id].tasks + '\n'

    if (jobbody[chat.id].conditions !== '') {
        txt += '\n'
        pointready[6] = '‚úÖ '
    }
    txt += '<b>–£—Å–ª–æ–≤–∏—è: </b>\n' + jobbody[chat.id].conditions + '\n\n'

    if (jobbody[chat.id].email !== ' ') pointready[7] = '‚úÖ '
    txt += '<b>‚úâÔ∏è –ü–æ—á—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): </b>' + jobbody[chat.id].email + '\n'

    if (jobbody[chat.id].readable_date !== '') pointready[8] = '‚úÖ '
    txt += '<b>üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): </b>' + jobbody[chat.id].readable_date + '\n'

    let kb = [
        [{
            text: pointready[0] + '–ö–æ–≥–æ –∏—â–µ–º? ' /* + jobbody[chat.id].job_type */,
            callback_data: 'editjoparam_0'
        }],
        [{
            text: pointready[1] + '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'/*  + jobbody[chat.id].company_name */,
            callback_data: 'editjoparam_1'
        },
        {
            text: pointready[2] + '–û –∫–æ–º–ø–∞–Ω–∏–∏'/*  + jobbody[chat.id].company_description */,
            callback_data: 'editjoparam_2'
        }],
        [{
            text: pointready[3] + '–ì–æ—Ä–æ–¥'/*  + jobbody[chat.id].city */,
            callback_data: 'editjoparam_3'
        },
        {
            text: pointready[4] + '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'/*  + jobbody[chat.id].requirements */,
            callback_data: 'editjoparam_4'
        }],
        [{
            text: pointready[5] + '–ó–∞–¥–∞—á–∏'/*  + jobbody[chat.id].tasks */,
            callback_data: 'editjoparam_5'
        },
        {
            text: pointready[6] + '–£—Å–ª–æ–≤–∏—è'/*  + jobbody[chat.id].conditions */,
            callback_data: 'editjoparam_6'
        }],
        [{
            text: pointready[7] + '–ü–æ—á—Ç–∞' /* + jobbody[chat.id].email */,
            callback_data: 'editjoparam_7'
        },
        {
            text: pointready[8] + '–î–∞—Ç–∞'/*  + jobbody[chat.id].readable_date */,
            callback_data: 'editjoparam_8'
        }]
    ]
    if (jobbody[chat.id].job_type !== '' && jobbody[chat.id].company_name !== '' && jobbody[chat.id].company_description !== '' && jobbody[chat.id].city !== '' && jobbody[chat.id].requirements !== '' && jobbody[chat.id].tasks !== '' && jobbody[chat.id].conditions !== ''){
        kb.push(
        [
            {
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: gotostart[1]
            },
            {
                text: previewjob[0],
                callback_data: previewjob[1]
            }
        ]
        )
    }
    if (jobbody[chat.id].job_type === '' || jobbody[chat.id].company_name === '' || jobbody[chat.id].company_description === '' || jobbody[chat.id].city === '' || jobbody[chat.id].requirements === '' || jobbody[chat.id].tasks === '' || jobbody[chat.id].conditions === ''){
        kb.push([
            {
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: gotostart[1]
            }
        ])
    }

    bot.sendMessage(chat.id, txt, {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: kb
        }
    }).then(res => {
        if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
        message_todelete[chat.id].push(res.message_id)
    })
}
function PreviewJob(chat){

    FixMessages(chat)
    let txt = ''
    if (jobbody[chat.id].readable_date.includes('.')) txt += 'üìÖ –í–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ <b>' + jobbody[chat.id].readable_date + '</b>'
    txt += '\n\nüöÄ –ò—â–µ–º <b>' + jobbody[chat.id].job_type + '</b> –≤ <b>' + jobbody[chat.id].company_name + '</b>'
    txt += '\n\n<b>–ì–æ—Ä–æ–¥:</b> ' + jobbody[chat.id].city
    txt += '\n\n<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n' + jobbody[chat.id].company_description
    txt += '\n\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: </b>\n' + jobbody[chat.id].requirements
    txt += '\n\n<b>–ó–∞–¥–∞—á–∏: </b>\n' + jobbody[chat.id].tasks
    txt += '\n\n<b>–£—Å–ª–æ–≤–∏—è: </b>\n' + jobbody[chat.id].conditions
    if (jobbody[chat.id].email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ—á—Ç—É: ' + jobbody[chat.id].email
    if (!jobbody[chat.id].email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ <a href="tg://user?id='+ jobbody[chat.id].sender +'">—Å—é–¥–∞</a>'
    
    let customer_message = ''
    let kb = []
    
    if (jobbody[chat.id].status === 'preparing'){
        customer_message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å". –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç\n\n'
        customer_message += txt

        kb = [
            [{
                text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                callback_data: 'pay_jobpost'
            }],
            [{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: editjob[1]
            }]
        ]
        if (jobbody[chat.id].time_created === 0){

            let today = new Date()
            let utcTime = today.getTime() + (today.getTimezoneOffset() * 60000)
            let timeOfffset = 3
            let finaldate = new Date(utcTime + (3600000 * timeOfffset))
    
            let minutes = finaldate.getUTCMinutes()
            if (minutes < 10) minutes = '0' + minutes
            let hours = finaldate.getUTCHours()
            if (hours < 10) hours = '0' + hours
            let date = finaldate.getUTCDate()
            let month = finaldate.getUTCMonth() + 1
            if (month < 10) month = '0' + month
            let readable_date = date + '.' + month + ', ' + hours + ':' + minutes

            let admin_text = 'ü•≥ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç <b><a href="tg://user?id='+chat.id+'">' + chat.first_name + '</a></b>'
            admin_text += '\n‚îú <b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> ' + readable_date
            admin_text += '\n‚îú <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã'
            admin_text += '\n\n<b>–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n\n'
            admin_text += txt

            bot.sendMessage(group_id, admin_text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                            url: 'tg://user?id='+ chat.id
                        }]
                    ]
                }
            })
            .then(res => {
                jobbody[chat.id].message_id = res.message_id
                if (jobbody[chat.id].time_created === 0) jobbody[chat.id].time_created = finaldate.getTime()
                console.log(jobbody[chat.id].time_created)
                let updates = {}
                updates['hrbot/users/' + chat.id + '/jobs/' + jobbody[chat.id].job_number] = jobbody[chat.id]
                fb.database().ref().update(updates)
            })
        }
    }

    if (jobbody[chat.id].status === 'approved'){

        kb = [
            [{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: editjob[1]
            }]
        ]

        let date = new Date(jobbody[chat.id].time_approved)
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 3
        let finaldate = new Date(utcTime + (3600000 * timeOfffset))

        let minutes = finaldate.getUTCMinutes()
        if (minutes < 10) minutes = '0' + minutes
        let hours = finaldate.getUTCHours()
        if (hours < 10) hours = '0' + hours
        let data = finaldate.getUTCDate()
        let month = finaldate.getUTCMonth() + 1
        if (month < 10) month = '0' + month
        let readable_date = data + '.' + month + ', ' + hours + ':' + minutes

        customer_message = '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ '+ readable_date + ' –∏ –¥–æ–ª–∂–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
        customer_message += '. –ï—Å–ª–∏ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="https://t.me/' + customer_support + '">—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>\n\n'
        customer_message += txt

        /* bot.sendMessage(chat.id, customer_message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: kb
            }
        }).then(res => {
            if (message_nobutton[chat.id] === undefined) message_nobutton[chat.id] = []
            message_nobutton[chat.id].push([res.message_id, txt, true])
        }) */
    }
    if (jobbody[chat.id].status === 'paid'){

        kb = [
            [{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: gotostart[1]
            }]
        ]

        let date = new Date(jobbody[chat.id].time_paid)
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 3
        let finaldate = new Date(utcTime + (3600000 * timeOfffset))

        let minutes = finaldate.getUTCMinutes()
        if (minutes < 10) minutes = '0' + minutes
        let hours = finaldate.getUTCHours()
        if (hours < 10) hours = '0' + hours
        let data = finaldate.getUTCDate()
        let month = finaldate.getUTCMonth() + 1
        if (month < 10) month = '0' + month
        let readable_date = data + '.' + month + ', ' + hours + ':' + minutes
        
        customer_message = '–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ ' + readable_date
        customer_message += '. –ï—Å–ª–∏ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="https://t.me/' + customer_support + '">—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>\n\n'
        customer_message += txt

        /* bot.sendMessage(chat.id, customer_message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: kb
            }
        }).then(res => {
            if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
            message_todelete[chat.id].push(res.message_id)
        }) */
    }
    if (jobbody[chat.id].status === 'published'){

        kb = [
            [{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: gotostart[1]
            }]
        ]
        
        let date = new Date(jobbody[chat.id].time_published)
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 3
        let finaldate = new Date(utcTime + (3600000 * timeOfffset))

        let minutes = finaldate.getUTCMinutes()
        if (minutes < 10) minutes = '0' + minutes
        let hours = finaldate.getUTCHours()
        if (hours < 10) hours = '0' + hours
        let data = finaldate.getUTCDate()
        let month = finaldate.getUTCMonth() + 1
        if (month < 10) month = '0' + month
        let readable_date = data + '.' + month + ', ' + hours + ':' + minutes
        
        customer_message = '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ' + readable_date
        customer_message += '\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ <a href="'+ channel_link +'/' + jobbody[chat.id].publish_id + '">–ø–æ—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π</a>\n\n'
        customer_message += txt

        /* bot.sendMessage(chat.id, customer_message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: kb
            }
        }).then(res => {
            if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
            message_todelete[chat.id].push(res.message_id)
        }) */
    }

    bot.sendMessage(chat.id, customer_message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup: {
            inline_keyboard: kb
        }
    }).then(res => {
        if (message_todelete[chat.id] === undefined) message_todelete[chat.id] = []
        message_todelete[chat.id].push(res.message_id)
    })
}
function PostPonePosting(){
    console.log('postpone')
    clearTimeout(timer);
    //–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    let creatordata = fb.database().ref('hrbot/postpone/')
    creatordata.get().then(result => {

        if (result.val() !== null){
            let id
            let local_jobnum
    
            let date = new Date()
            let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
            let timeOfffset = 3
            let current_date = new Date(utcTime + (3600000 * timeOfffset))
            
            let current_data = current_date.getUTCDate()
            let current_month = current_date.getUTCMonth() + 1
            if (current_month < 10) current_month = '0' + current_month
            let readable_current_date = current_data + '.' + current_month
    
            let updates = {}
    
            for (let i = 0; i < result.val().length; i++) {
    
                if (result.val()[i].date === readable_current_date && result.val()[i].list !== undefined) {
    
                    id = result.val()[i].list[0].split('_')[0]
                    local_jobnum = result.val()[i].list[0].split('_')[1]
    
                    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –∏ –Ω—É–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å—Ç–∏—Ç—å
    
                    //–ï—Å–ª–∏ –≤—Ä–µ–º—è —Ç–æ –∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ—Å—Ç–∏—Ç—å —É–∑–Ω–∞–µ–º –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç. –í—ã—á–∏—Å–ª—è–µ–º getTime –ø–æ—Å—Ç
                    if ((date.getTime() - last_post.getTime()) > (1000 * 60 * postpone_delay)){
                        console.log('TIME IS GOOD. POSTING NOW: date = ' + date.getTime() + ', last_post = ' + last_post.getTime() + ', deelay = ' + (1000 * 60 * postpone_delay))
                        let newpostponelist = []
                        if (result.val()[i].list.length > 1){
                            for (let x = 1; x < result.val()[i].list.length; x++){
                                newpostponelist[x - 1] = result.val()[i].list[x]
                            }
                            updates['hrbot/postpone/' + i + '/list/'] = newpostponelist
                        }
                        if (result.val()[i].list.length <= 1){
                            updates['hrbot/postpone/' + i] = null
                        }
    
                        let jobinfodata = fb.database().ref('hrbot/users/' + id + '/jobs/' + local_jobnum)
                        jobinfodata.get().then(reply => {
                
                            let txt = 'üöÄ –ò—â–µ–º <b>' + reply.val().job_type + '</b> –≤ <b>' + reply.val().company_name + '</b>'
                            txt += '\n\n<b>–ì–æ—Ä–æ–¥:</b> ' + reply.val().city
                            txt += '\n\n<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n' + reply.val().company_description
                            txt += '\n\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: </b>\n' + reply.val().requirements
                            txt += '\n\n<b>–ó–∞–¥–∞—á–∏: </b>\n' + reply.val().tasks
                            txt += '\n\n<b>–£—Å–ª–æ–≤–∏—è: </b>\n' + reply.val().conditions
                            if (reply.val().email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ—á—Ç—É: ' + reply.val().email
                            if (!reply.val().email.includes('@')) txt += '\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ <a href="tg://user?id='+ reply.val().sender +'">—Å—é–¥–∞</a>'
                
                            bot.sendMessage(channel_id, txt, {
                                disable_web_page_preview: true,
                                parse_mode: 'HTML'
                            })
                            .then(res => {
                                console.log(res)
                                updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/publish_id'] = res.message_id
                                updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/status'] = 'published'
                                updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/time_published'] = res.date * 1000
                                
                                let clienttext = '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è <b><a href="'+ channel_link +'/'+ res.message_id +'">' + reply.val().job_type + ' –≤ '+ reply.val().company_name +'"</a></b> –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.'
                                bot.sendMessage(id, clienttext, {
                                    disable_web_page_preview: true,
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{
                                                text: '–•–æ—Ä–æ—à–æ üëçüèª',
                                                callback_data: gotostart[1]
                                            }]
                                        ]
                                    }
                                }).then(res2 => {
                                    if (message_todelete[id] === undefined) message_todelete[id] = []
                                    message_todelete[id].push(res2.message_id)
                                })
                
                                let admingroup_text = '–í—ã —É—Å–ø–µ—à–Ω–æ <a href="'+ channel_link +'/'+ res.message_id +'">–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏</a> –ø–æ—Å—Ç <a href="tg://user?id='+id+'">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
                                bot.deleteMessage(group_id, reply.val().message_id).catch(err => {console.log('err: ' + err)})
                                bot.sendMessage(group_id, admingroup_text, {
                                    parse_mode: 'HTML',
                                    disable_web_page_preview: true,
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{
                                                text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                                                url: 'tg://user?id='+id
                                            }],
                                            [{
                                                text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç',
                                                url: channel_link +'/'+ res.message_id
                                            }]
                                        ]
                                    }
                                })
                                .then(res3 => {
                                    updates['hrbot/users/' + id + '/jobs/' + local_jobnum + '/time_published'] = res3.date * 1000
                                    fb.database().ref().update(updates)
                                })
                    
                                
                            })
                        })
                    }
                    if ((date.getTime() - last_post.getTime()) <= (1000 * 60 * postpone_delay)){
                        console.log('TOO EARLY TO POST: date - last_post = ' + (date.getTime() - last_post.getTime()) + ', deelay = ' + (1000 * 60 * postpone_delay))

                        //–ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É getTime —Å–µ–π—á–∞—Å –∏ getTime –ø–æ—Å—Ç–∞ –º–µ–Ω—å—à–µ deelay, —Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é futurepost —Å –≤—Ä–µ–º–µ–Ω–µ–º = getTime –ø–æ—Å—Ç–∞  + delay
                        let futurepost = last_post.getTime() + postpone_delay
    
                        //–ù–∞—Ö–æ–¥–∏–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–µ futurepost —á–µ–º currenttime –∏ –∑–∞–Ω–æ—Å–∏–º —ç—Ç–æ –≤ tempdelay. –ü—Ä–∏–±–∞–≤–ª—è–µ–º 5 —Å–µ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        let tempdelay = futurepost - date.getTime()
    
                        //–°—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä —Å tempdelay
                        if (postpone_enabled) timer = setTimeout(() => PostPonePosting(), tempdelay)
                    }
                }
                if (i === result.val().length - 1 && result.val()[i].date !== readable_current_date){
                    if (postpone_enabled) timer = setTimeout(() => PostPonePosting(), 1000 * postpone_delay)
                }
                else {
                    timer = setTimeout(() => PostPonePosting(), 1000 * 60 * postpone_delay);
                }
            }
        }

        else {
            timer = setTimeout(() => PostPonePosting(), 1000 * 60 * postpone_delay);
        }
    })
}
process.on('uncaughtException', function (err) {
    console.log(err);
});
